// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"email/dal/model"
)

func newOpsEmlResult(db *gorm.DB, opts ...gen.DOOption) opsEmlResult {
	_opsEmlResult := opsEmlResult{}

	_opsEmlResult.opsEmlResultDo.UseDB(db, opts...)
	_opsEmlResult.opsEmlResultDo.UseModel(&model.OpsEmlResult{})

	tableName := _opsEmlResult.opsEmlResultDo.TableName()
	_opsEmlResult.ALL = field.NewAsterisk(tableName)
	_opsEmlResult.ID = field.NewInt64(tableName, "id")
	_opsEmlResult.AccountName = field.NewString(tableName, "account_name")
	_opsEmlResult.Domain = field.NewString(tableName, "domain")
	_opsEmlResult.ErrorClassification = field.NewString(tableName, "error_classification")
	_opsEmlResult.SentTime = field.NewTime(tableName, "sent_time")
	_opsEmlResult.Message = field.NewString(tableName, "message")
	_opsEmlResult.Status = field.NewInt32(tableName, "status")
	_opsEmlResult.Subject = field.NewString(tableName, "subject")
	_opsEmlResult.ToAddress = field.NewString(tableName, "to_address")
	_opsEmlResult.CreateTime = field.NewTime(tableName, "create_time")
	_opsEmlResult.UpdateTime = field.NewTime(tableName, "update_time")

	_opsEmlResult.fillFieldMap()

	return _opsEmlResult
}

type opsEmlResult struct {
	opsEmlResultDo opsEmlResultDo

	ALL                 field.Asterisk
	ID                  field.Int64
	AccountName         field.String // 发件账号
	Domain              field.String // 收件域
	ErrorClassification field.String // 错误类型
	SentTime            field.Time   // 发送时间
	Message             field.String // 详情信息
	Status              field.Int32  // 投递结果
	Subject             field.String // 主题
	ToAddress           field.String // 收件地址
	CreateTime          field.Time
	UpdateTime          field.Time

	fieldMap map[string]field.Expr
}

func (o opsEmlResult) Table(newTableName string) *opsEmlResult {
	o.opsEmlResultDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o opsEmlResult) As(alias string) *opsEmlResult {
	o.opsEmlResultDo.DO = *(o.opsEmlResultDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *opsEmlResult) updateTableName(table string) *opsEmlResult {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.AccountName = field.NewString(table, "account_name")
	o.Domain = field.NewString(table, "domain")
	o.ErrorClassification = field.NewString(table, "error_classification")
	o.SentTime = field.NewTime(table, "sent_time")
	o.Message = field.NewString(table, "message")
	o.Status = field.NewInt32(table, "status")
	o.Subject = field.NewString(table, "subject")
	o.ToAddress = field.NewString(table, "to_address")
	o.CreateTime = field.NewTime(table, "create_time")
	o.UpdateTime = field.NewTime(table, "update_time")

	o.fillFieldMap()

	return o
}

func (o *opsEmlResult) WithContext(ctx context.Context) *opsEmlResultDo {
	return o.opsEmlResultDo.WithContext(ctx)
}

func (o opsEmlResult) TableName() string { return o.opsEmlResultDo.TableName() }

func (o opsEmlResult) Alias() string { return o.opsEmlResultDo.Alias() }

func (o opsEmlResult) Columns(cols ...field.Expr) gen.Columns {
	return o.opsEmlResultDo.Columns(cols...)
}

func (o *opsEmlResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *opsEmlResult) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 11)
	o.fieldMap["id"] = o.ID
	o.fieldMap["account_name"] = o.AccountName
	o.fieldMap["domain"] = o.Domain
	o.fieldMap["error_classification"] = o.ErrorClassification
	o.fieldMap["sent_time"] = o.SentTime
	o.fieldMap["message"] = o.Message
	o.fieldMap["status"] = o.Status
	o.fieldMap["subject"] = o.Subject
	o.fieldMap["to_address"] = o.ToAddress
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["update_time"] = o.UpdateTime
}

func (o opsEmlResult) clone(db *gorm.DB) opsEmlResult {
	o.opsEmlResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o opsEmlResult) replaceDB(db *gorm.DB) opsEmlResult {
	o.opsEmlResultDo.ReplaceDB(db)
	return o
}

type opsEmlResultDo struct{ gen.DO }

func (o opsEmlResultDo) Debug() *opsEmlResultDo {
	return o.withDO(o.DO.Debug())
}

func (o opsEmlResultDo) WithContext(ctx context.Context) *opsEmlResultDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o opsEmlResultDo) ReadDB() *opsEmlResultDo {
	return o.Clauses(dbresolver.Read)
}

func (o opsEmlResultDo) WriteDB() *opsEmlResultDo {
	return o.Clauses(dbresolver.Write)
}

func (o opsEmlResultDo) Session(config *gorm.Session) *opsEmlResultDo {
	return o.withDO(o.DO.Session(config))
}

func (o opsEmlResultDo) Clauses(conds ...clause.Expression) *opsEmlResultDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o opsEmlResultDo) Returning(value interface{}, columns ...string) *opsEmlResultDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o opsEmlResultDo) Not(conds ...gen.Condition) *opsEmlResultDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o opsEmlResultDo) Or(conds ...gen.Condition) *opsEmlResultDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o opsEmlResultDo) Select(conds ...field.Expr) *opsEmlResultDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o opsEmlResultDo) Where(conds ...gen.Condition) *opsEmlResultDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o opsEmlResultDo) Order(conds ...field.Expr) *opsEmlResultDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o opsEmlResultDo) Distinct(cols ...field.Expr) *opsEmlResultDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o opsEmlResultDo) Omit(cols ...field.Expr) *opsEmlResultDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o opsEmlResultDo) Join(table schema.Tabler, on ...field.Expr) *opsEmlResultDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o opsEmlResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) *opsEmlResultDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o opsEmlResultDo) RightJoin(table schema.Tabler, on ...field.Expr) *opsEmlResultDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o opsEmlResultDo) Group(cols ...field.Expr) *opsEmlResultDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o opsEmlResultDo) Having(conds ...gen.Condition) *opsEmlResultDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o opsEmlResultDo) Limit(limit int) *opsEmlResultDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o opsEmlResultDo) Offset(offset int) *opsEmlResultDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o opsEmlResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *opsEmlResultDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o opsEmlResultDo) Unscoped() *opsEmlResultDo {
	return o.withDO(o.DO.Unscoped())
}

func (o opsEmlResultDo) Create(values ...*model.OpsEmlResult) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o opsEmlResultDo) CreateInBatches(values []*model.OpsEmlResult, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o opsEmlResultDo) Save(values ...*model.OpsEmlResult) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o opsEmlResultDo) First() (*model.OpsEmlResult, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsEmlResult), nil
	}
}

func (o opsEmlResultDo) Take() (*model.OpsEmlResult, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsEmlResult), nil
	}
}

func (o opsEmlResultDo) Last() (*model.OpsEmlResult, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsEmlResult), nil
	}
}

func (o opsEmlResultDo) Find() ([]*model.OpsEmlResult, error) {
	result, err := o.DO.Find()
	return result.([]*model.OpsEmlResult), err
}

func (o opsEmlResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OpsEmlResult, err error) {
	buf := make([]*model.OpsEmlResult, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o opsEmlResultDo) FindInBatches(result *[]*model.OpsEmlResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o opsEmlResultDo) Attrs(attrs ...field.AssignExpr) *opsEmlResultDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o opsEmlResultDo) Assign(attrs ...field.AssignExpr) *opsEmlResultDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o opsEmlResultDo) Joins(fields ...field.RelationField) *opsEmlResultDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o opsEmlResultDo) Preload(fields ...field.RelationField) *opsEmlResultDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o opsEmlResultDo) FirstOrInit() (*model.OpsEmlResult, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsEmlResult), nil
	}
}

func (o opsEmlResultDo) FirstOrCreate() (*model.OpsEmlResult, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsEmlResult), nil
	}
}

func (o opsEmlResultDo) FindByPage(offset int, limit int) (result []*model.OpsEmlResult, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o opsEmlResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o opsEmlResultDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o opsEmlResultDo) Delete(models ...*model.OpsEmlResult) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *opsEmlResultDo) withDO(do gen.Dao) *opsEmlResultDo {
	o.DO = *do.(*gen.DO)
	return o
}
