// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"email/dal/model"
)

func newEmlTaskConfig(db *gorm.DB, opts ...gen.DOOption) emlTaskConfig {
	_emlTaskConfig := emlTaskConfig{}

	_emlTaskConfig.emlTaskConfigDo.UseDB(db, opts...)
	_emlTaskConfig.emlTaskConfigDo.UseModel(&model.EmlTaskConfig{})

	tableName := _emlTaskConfig.emlTaskConfigDo.TableName()
	_emlTaskConfig.ALL = field.NewAsterisk(tableName)
	_emlTaskConfig.ID = field.NewInt64(tableName, "id")
	_emlTaskConfig.Cid = field.NewInt64(tableName, "cid")
	_emlTaskConfig.Category = field.NewString(tableName, "category")
	_emlTaskConfig.Type = field.NewString(tableName, "type")
	_emlTaskConfig.Priority = field.NewInt32(tableName, "priority")
	_emlTaskConfig.MaxRetry = field.NewInt32(tableName, "max_retry")
	_emlTaskConfig.CreateTime = field.NewTime(tableName, "create_time")
	_emlTaskConfig.UpdateTime = field.NewTime(tableName, "update_time")

	_emlTaskConfig.fillFieldMap()

	return _emlTaskConfig
}

// emlTaskConfig 任务配置表
type emlTaskConfig struct {
	emlTaskConfigDo emlTaskConfigDo

	ALL        field.Asterisk
	ID         field.Int64
	Cid        field.Int64
	Category   field.String // 任务类型(大分类）
	Type       field.String // 任务类型（小分类）
	Priority   field.Int32  // 值越小，优先级越高
	MaxRetry   field.Int32  // 最大重试次数
	CreateTime field.Time
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (e emlTaskConfig) Table(newTableName string) *emlTaskConfig {
	e.emlTaskConfigDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emlTaskConfig) As(alias string) *emlTaskConfig {
	e.emlTaskConfigDo.DO = *(e.emlTaskConfigDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emlTaskConfig) updateTableName(table string) *emlTaskConfig {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Cid = field.NewInt64(table, "cid")
	e.Category = field.NewString(table, "category")
	e.Type = field.NewString(table, "type")
	e.Priority = field.NewInt32(table, "priority")
	e.MaxRetry = field.NewInt32(table, "max_retry")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *emlTaskConfig) WithContext(ctx context.Context) *emlTaskConfigDo {
	return e.emlTaskConfigDo.WithContext(ctx)
}

func (e emlTaskConfig) TableName() string { return e.emlTaskConfigDo.TableName() }

func (e emlTaskConfig) Alias() string { return e.emlTaskConfigDo.Alias() }

func (e emlTaskConfig) Columns(cols ...field.Expr) gen.Columns {
	return e.emlTaskConfigDo.Columns(cols...)
}

func (e *emlTaskConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emlTaskConfig) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 8)
	e.fieldMap["id"] = e.ID
	e.fieldMap["cid"] = e.Cid
	e.fieldMap["category"] = e.Category
	e.fieldMap["type"] = e.Type
	e.fieldMap["priority"] = e.Priority
	e.fieldMap["max_retry"] = e.MaxRetry
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e emlTaskConfig) clone(db *gorm.DB) emlTaskConfig {
	e.emlTaskConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e emlTaskConfig) replaceDB(db *gorm.DB) emlTaskConfig {
	e.emlTaskConfigDo.ReplaceDB(db)
	return e
}

type emlTaskConfigDo struct{ gen.DO }

func (e emlTaskConfigDo) Debug() *emlTaskConfigDo {
	return e.withDO(e.DO.Debug())
}

func (e emlTaskConfigDo) WithContext(ctx context.Context) *emlTaskConfigDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emlTaskConfigDo) ReadDB() *emlTaskConfigDo {
	return e.Clauses(dbresolver.Read)
}

func (e emlTaskConfigDo) WriteDB() *emlTaskConfigDo {
	return e.Clauses(dbresolver.Write)
}

func (e emlTaskConfigDo) Session(config *gorm.Session) *emlTaskConfigDo {
	return e.withDO(e.DO.Session(config))
}

func (e emlTaskConfigDo) Clauses(conds ...clause.Expression) *emlTaskConfigDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emlTaskConfigDo) Returning(value interface{}, columns ...string) *emlTaskConfigDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emlTaskConfigDo) Not(conds ...gen.Condition) *emlTaskConfigDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emlTaskConfigDo) Or(conds ...gen.Condition) *emlTaskConfigDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emlTaskConfigDo) Select(conds ...field.Expr) *emlTaskConfigDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emlTaskConfigDo) Where(conds ...gen.Condition) *emlTaskConfigDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emlTaskConfigDo) Order(conds ...field.Expr) *emlTaskConfigDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emlTaskConfigDo) Distinct(cols ...field.Expr) *emlTaskConfigDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emlTaskConfigDo) Omit(cols ...field.Expr) *emlTaskConfigDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emlTaskConfigDo) Join(table schema.Tabler, on ...field.Expr) *emlTaskConfigDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emlTaskConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *emlTaskConfigDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emlTaskConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *emlTaskConfigDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emlTaskConfigDo) Group(cols ...field.Expr) *emlTaskConfigDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emlTaskConfigDo) Having(conds ...gen.Condition) *emlTaskConfigDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emlTaskConfigDo) Limit(limit int) *emlTaskConfigDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emlTaskConfigDo) Offset(offset int) *emlTaskConfigDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emlTaskConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *emlTaskConfigDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emlTaskConfigDo) Unscoped() *emlTaskConfigDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emlTaskConfigDo) Create(values ...*model.EmlTaskConfig) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emlTaskConfigDo) CreateInBatches(values []*model.EmlTaskConfig, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emlTaskConfigDo) Save(values ...*model.EmlTaskConfig) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emlTaskConfigDo) First() (*model.EmlTaskConfig, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTaskConfig), nil
	}
}

func (e emlTaskConfigDo) Take() (*model.EmlTaskConfig, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTaskConfig), nil
	}
}

func (e emlTaskConfigDo) Last() (*model.EmlTaskConfig, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTaskConfig), nil
	}
}

func (e emlTaskConfigDo) Find() ([]*model.EmlTaskConfig, error) {
	result, err := e.DO.Find()
	return result.([]*model.EmlTaskConfig), err
}

func (e emlTaskConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmlTaskConfig, err error) {
	buf := make([]*model.EmlTaskConfig, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emlTaskConfigDo) FindInBatches(result *[]*model.EmlTaskConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emlTaskConfigDo) Attrs(attrs ...field.AssignExpr) *emlTaskConfigDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emlTaskConfigDo) Assign(attrs ...field.AssignExpr) *emlTaskConfigDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emlTaskConfigDo) Joins(fields ...field.RelationField) *emlTaskConfigDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emlTaskConfigDo) Preload(fields ...field.RelationField) *emlTaskConfigDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emlTaskConfigDo) FirstOrInit() (*model.EmlTaskConfig, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTaskConfig), nil
	}
}

func (e emlTaskConfigDo) FirstOrCreate() (*model.EmlTaskConfig, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTaskConfig), nil
	}
}

func (e emlTaskConfigDo) FindByPage(offset int, limit int) (result []*model.EmlTaskConfig, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emlTaskConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emlTaskConfigDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emlTaskConfigDo) Delete(models ...*model.EmlTaskConfig) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emlTaskConfigDo) withDO(do gen.Dao) *emlTaskConfigDo {
	e.DO = *do.(*gen.DO)
	return e
}
