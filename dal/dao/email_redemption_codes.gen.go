// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"email/dal/model"
)

func newEmailRedemptionCode(db *gorm.DB, opts ...gen.DOOption) emailRedemptionCode {
	_emailRedemptionCode := emailRedemptionCode{}

	_emailRedemptionCode.emailRedemptionCodeDo.UseDB(db, opts...)
	_emailRedemptionCode.emailRedemptionCodeDo.UseModel(&model.EmlRedemptionCode{})

	tableName := _emailRedemptionCode.emailRedemptionCodeDo.TableName()
	_emailRedemptionCode.ALL = field.NewAsterisk(tableName)
	_emailRedemptionCode.ID = field.NewInt64(tableName, "id")
	_emailRedemptionCode.Cid = field.NewInt64(tableName, "cid")
	_emailRedemptionCode.TaskSubID = field.NewInt64(tableName, "task_sub_id")
	_emailRedemptionCode.Code = field.NewString(tableName, "code")
	_emailRedemptionCode.Type = field.NewString(tableName, "type")
	_emailRedemptionCode.Amount = field.NewInt32(tableName, "amount")
	_emailRedemptionCode.EndTime = field.NewTime(tableName, "end_time")
	_emailRedemptionCode.StartTime = field.NewTime(tableName, "start_time")
	_emailRedemptionCode.AmountValidTime = field.NewTime(tableName, "amount_valid_time")
	_emailRedemptionCode.Status = field.NewInt32(tableName, "status")
	_emailRedemptionCode.UID = field.NewString(tableName, "uid")
	_emailRedemptionCode.UsedTime = field.NewTime(tableName, "used_time")
	_emailRedemptionCode.CreateTime = field.NewTime(tableName, "create_time")
	_emailRedemptionCode.UpdateTime = field.NewTime(tableName, "update_time")

	_emailRedemptionCode.fillFieldMap()

	return _emailRedemptionCode
}

// emailRedemptionCode 存储一些兑换码
type emailRedemptionCode struct {
	emailRedemptionCodeDo emailRedemptionCodeDo

	ALL             field.Asterisk
	ID              field.Int64
	Cid             field.Int64  // 商户id
	TaskSubID       field.Int64  // 邮件任务 ID
	Code            field.String // 兑换码
	Type            field.String // 兑换码类别（credit）
	Amount          field.Int32  // 兑换值(100)
	EndTime         field.Time   // 失效时间
	StartTime       field.Time   // 生效时间
	AmountValidTime field.Time   // 兑换后有效期
	Status          field.Int32  // 是否已经使用（0：未使用，1：已使用）
	UID             field.String // 被哪个用户使用
	UsedTime        field.Time   // 使用时间
	CreateTime      field.Time   // 创建时间
	UpdateTime      field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (e emailRedemptionCode) Table(newTableName string) *emailRedemptionCode {
	e.emailRedemptionCodeDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emailRedemptionCode) As(alias string) *emailRedemptionCode {
	e.emailRedemptionCodeDo.DO = *(e.emailRedemptionCodeDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emailRedemptionCode) updateTableName(table string) *emailRedemptionCode {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Cid = field.NewInt64(table, "cid")
	e.TaskSubID = field.NewInt64(table, "task_sub_id")
	e.Code = field.NewString(table, "code")
	e.Type = field.NewString(table, "type")
	e.Amount = field.NewInt32(table, "amount")
	e.EndTime = field.NewTime(table, "end_time")
	e.StartTime = field.NewTime(table, "start_time")
	e.AmountValidTime = field.NewTime(table, "amount_valid_time")
	e.Status = field.NewInt32(table, "status")
	e.UID = field.NewString(table, "uid")
	e.UsedTime = field.NewTime(table, "used_time")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *emailRedemptionCode) WithContext(ctx context.Context) *emailRedemptionCodeDo {
	return e.emailRedemptionCodeDo.WithContext(ctx)
}

func (e emailRedemptionCode) TableName() string { return e.emailRedemptionCodeDo.TableName() }

func (e emailRedemptionCode) Alias() string { return e.emailRedemptionCodeDo.Alias() }

func (e emailRedemptionCode) Columns(cols ...field.Expr) gen.Columns {
	return e.emailRedemptionCodeDo.Columns(cols...)
}

func (e *emailRedemptionCode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emailRedemptionCode) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 14)
	e.fieldMap["id"] = e.ID
	e.fieldMap["cid"] = e.Cid
	e.fieldMap["task_sub_id"] = e.TaskSubID
	e.fieldMap["code"] = e.Code
	e.fieldMap["type"] = e.Type
	e.fieldMap["amount"] = e.Amount
	e.fieldMap["end_time"] = e.EndTime
	e.fieldMap["start_time"] = e.StartTime
	e.fieldMap["amount_valid_time"] = e.AmountValidTime
	e.fieldMap["status"] = e.Status
	e.fieldMap["uid"] = e.UID
	e.fieldMap["used_time"] = e.UsedTime
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e emailRedemptionCode) clone(db *gorm.DB) emailRedemptionCode {
	e.emailRedemptionCodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e emailRedemptionCode) replaceDB(db *gorm.DB) emailRedemptionCode {
	e.emailRedemptionCodeDo.ReplaceDB(db)
	return e
}

type emailRedemptionCodeDo struct{ gen.DO }

func (e emailRedemptionCodeDo) Debug() *emailRedemptionCodeDo {
	return e.withDO(e.DO.Debug())
}

func (e emailRedemptionCodeDo) WithContext(ctx context.Context) *emailRedemptionCodeDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emailRedemptionCodeDo) ReadDB() *emailRedemptionCodeDo {
	return e.Clauses(dbresolver.Read)
}

func (e emailRedemptionCodeDo) WriteDB() *emailRedemptionCodeDo {
	return e.Clauses(dbresolver.Write)
}

func (e emailRedemptionCodeDo) Session(config *gorm.Session) *emailRedemptionCodeDo {
	return e.withDO(e.DO.Session(config))
}

func (e emailRedemptionCodeDo) Clauses(conds ...clause.Expression) *emailRedemptionCodeDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emailRedemptionCodeDo) Returning(value interface{}, columns ...string) *emailRedemptionCodeDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emailRedemptionCodeDo) Not(conds ...gen.Condition) *emailRedemptionCodeDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emailRedemptionCodeDo) Or(conds ...gen.Condition) *emailRedemptionCodeDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emailRedemptionCodeDo) Select(conds ...field.Expr) *emailRedemptionCodeDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emailRedemptionCodeDo) Where(conds ...gen.Condition) *emailRedemptionCodeDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emailRedemptionCodeDo) Order(conds ...field.Expr) *emailRedemptionCodeDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emailRedemptionCodeDo) Distinct(cols ...field.Expr) *emailRedemptionCodeDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emailRedemptionCodeDo) Omit(cols ...field.Expr) *emailRedemptionCodeDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emailRedemptionCodeDo) Join(table schema.Tabler, on ...field.Expr) *emailRedemptionCodeDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emailRedemptionCodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *emailRedemptionCodeDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emailRedemptionCodeDo) RightJoin(table schema.Tabler, on ...field.Expr) *emailRedemptionCodeDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emailRedemptionCodeDo) Group(cols ...field.Expr) *emailRedemptionCodeDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emailRedemptionCodeDo) Having(conds ...gen.Condition) *emailRedemptionCodeDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emailRedemptionCodeDo) Limit(limit int) *emailRedemptionCodeDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emailRedemptionCodeDo) Offset(offset int) *emailRedemptionCodeDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emailRedemptionCodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *emailRedemptionCodeDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emailRedemptionCodeDo) Unscoped() *emailRedemptionCodeDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emailRedemptionCodeDo) Create(values ...*model.EmlRedemptionCode) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emailRedemptionCodeDo) CreateInBatches(values []*model.EmlRedemptionCode, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emailRedemptionCodeDo) Save(values ...*model.EmlRedemptionCode) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emailRedemptionCodeDo) First() (*model.EmlRedemptionCode, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlRedemptionCode), nil
	}
}

func (e emailRedemptionCodeDo) Take() (*model.EmlRedemptionCode, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlRedemptionCode), nil
	}
}

func (e emailRedemptionCodeDo) Last() (*model.EmlRedemptionCode, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlRedemptionCode), nil
	}
}

func (e emailRedemptionCodeDo) Find() ([]*model.EmlRedemptionCode, error) {
	result, err := e.DO.Find()
	return result.([]*model.EmlRedemptionCode), err
}

func (e emailRedemptionCodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmlRedemptionCode, err error) {
	buf := make([]*model.EmlRedemptionCode, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emailRedemptionCodeDo) FindInBatches(result *[]*model.EmlRedemptionCode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emailRedemptionCodeDo) Attrs(attrs ...field.AssignExpr) *emailRedemptionCodeDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emailRedemptionCodeDo) Assign(attrs ...field.AssignExpr) *emailRedemptionCodeDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emailRedemptionCodeDo) Joins(fields ...field.RelationField) *emailRedemptionCodeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emailRedemptionCodeDo) Preload(fields ...field.RelationField) *emailRedemptionCodeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emailRedemptionCodeDo) FirstOrInit() (*model.EmlRedemptionCode, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlRedemptionCode), nil
	}
}

func (e emailRedemptionCodeDo) FirstOrCreate() (*model.EmlRedemptionCode, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlRedemptionCode), nil
	}
}

func (e emailRedemptionCodeDo) FindByPage(offset int, limit int) (result []*model.EmlRedemptionCode, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emailRedemptionCodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emailRedemptionCodeDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emailRedemptionCodeDo) Delete(models ...*model.EmlRedemptionCode) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emailRedemptionCodeDo) withDO(do gen.Dao) *emailRedemptionCodeDo {
	e.DO = *do.(*gen.DO)
	return e
}
