// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"email/dal/model"
)

func newEmlTag(db *gorm.DB, opts ...gen.DOOption) emlTag {
	_emlTag := emlTag{}

	_emlTag.emlTagDo.UseDB(db, opts...)
	_emlTag.emlTagDo.UseModel(&model.EmlTag{})

	tableName := _emlTag.emlTagDo.TableName()
	_emlTag.ALL = field.NewAsterisk(tableName)
	_emlTag.ID = field.NewInt64(tableName, "id")
	_emlTag.Cid = field.NewInt64(tableName, "cid")
	_emlTag.Tag = field.NewString(tableName, "tag")
	_emlTag.Description = field.NewString(tableName, "description")
	_emlTag.UpdateTime = field.NewTime(tableName, "update_time")
	_emlTag.CreateTime = field.NewTime(tableName, "create_time")

	_emlTag.fillFieldMap()

	return _emlTag
}

type emlTag struct {
	emlTagDo emlTagDo

	ALL         field.Asterisk
	ID          field.Int64
	Cid         field.Int64  // 关联商户 ID
	Tag         field.String // 标签
	Description field.String // 标签描述
	UpdateTime  field.Time   // 更新时间
	CreateTime  field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (e emlTag) Table(newTableName string) *emlTag {
	e.emlTagDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emlTag) As(alias string) *emlTag {
	e.emlTagDo.DO = *(e.emlTagDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emlTag) updateTableName(table string) *emlTag {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Cid = field.NewInt64(table, "cid")
	e.Tag = field.NewString(table, "tag")
	e.Description = field.NewString(table, "description")
	e.UpdateTime = field.NewTime(table, "update_time")
	e.CreateTime = field.NewTime(table, "create_time")

	e.fillFieldMap()

	return e
}

func (e *emlTag) WithContext(ctx context.Context) *emlTagDo { return e.emlTagDo.WithContext(ctx) }

func (e emlTag) TableName() string { return e.emlTagDo.TableName() }

func (e emlTag) Alias() string { return e.emlTagDo.Alias() }

func (e emlTag) Columns(cols ...field.Expr) gen.Columns { return e.emlTagDo.Columns(cols...) }

func (e *emlTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emlTag) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["cid"] = e.Cid
	e.fieldMap["tag"] = e.Tag
	e.fieldMap["description"] = e.Description
	e.fieldMap["update_time"] = e.UpdateTime
	e.fieldMap["create_time"] = e.CreateTime
}

func (e emlTag) clone(db *gorm.DB) emlTag {
	e.emlTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e emlTag) replaceDB(db *gorm.DB) emlTag {
	e.emlTagDo.ReplaceDB(db)
	return e
}

type emlTagDo struct{ gen.DO }

func (e emlTagDo) Debug() *emlTagDo {
	return e.withDO(e.DO.Debug())
}

func (e emlTagDo) WithContext(ctx context.Context) *emlTagDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emlTagDo) ReadDB() *emlTagDo {
	return e.Clauses(dbresolver.Read)
}

func (e emlTagDo) WriteDB() *emlTagDo {
	return e.Clauses(dbresolver.Write)
}

func (e emlTagDo) Session(config *gorm.Session) *emlTagDo {
	return e.withDO(e.DO.Session(config))
}

func (e emlTagDo) Clauses(conds ...clause.Expression) *emlTagDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emlTagDo) Returning(value interface{}, columns ...string) *emlTagDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emlTagDo) Not(conds ...gen.Condition) *emlTagDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emlTagDo) Or(conds ...gen.Condition) *emlTagDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emlTagDo) Select(conds ...field.Expr) *emlTagDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emlTagDo) Where(conds ...gen.Condition) *emlTagDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emlTagDo) Order(conds ...field.Expr) *emlTagDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emlTagDo) Distinct(cols ...field.Expr) *emlTagDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emlTagDo) Omit(cols ...field.Expr) *emlTagDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emlTagDo) Join(table schema.Tabler, on ...field.Expr) *emlTagDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emlTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) *emlTagDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emlTagDo) RightJoin(table schema.Tabler, on ...field.Expr) *emlTagDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emlTagDo) Group(cols ...field.Expr) *emlTagDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emlTagDo) Having(conds ...gen.Condition) *emlTagDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emlTagDo) Limit(limit int) *emlTagDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emlTagDo) Offset(offset int) *emlTagDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emlTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *emlTagDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emlTagDo) Unscoped() *emlTagDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emlTagDo) Create(values ...*model.EmlTag) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emlTagDo) CreateInBatches(values []*model.EmlTag, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emlTagDo) Save(values ...*model.EmlTag) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emlTagDo) First() (*model.EmlTag, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTag), nil
	}
}

func (e emlTagDo) Take() (*model.EmlTag, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTag), nil
	}
}

func (e emlTagDo) Last() (*model.EmlTag, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTag), nil
	}
}

func (e emlTagDo) Find() ([]*model.EmlTag, error) {
	result, err := e.DO.Find()
	return result.([]*model.EmlTag), err
}

func (e emlTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmlTag, err error) {
	buf := make([]*model.EmlTag, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emlTagDo) FindInBatches(result *[]*model.EmlTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emlTagDo) Attrs(attrs ...field.AssignExpr) *emlTagDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emlTagDo) Assign(attrs ...field.AssignExpr) *emlTagDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emlTagDo) Joins(fields ...field.RelationField) *emlTagDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emlTagDo) Preload(fields ...field.RelationField) *emlTagDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emlTagDo) FirstOrInit() (*model.EmlTag, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTag), nil
	}
}

func (e emlTagDo) FirstOrCreate() (*model.EmlTag, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTag), nil
	}
}

func (e emlTagDo) FindByPage(offset int, limit int) (result []*model.EmlTag, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emlTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emlTagDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emlTagDo) Delete(models ...*model.EmlTag) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emlTagDo) withDO(do gen.Dao) *emlTagDo {
	e.DO = *do.(*gen.DO)
	return e
}
