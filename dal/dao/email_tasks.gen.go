// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"email/dal/model"
)

func newEmailTask(db *gorm.DB, opts ...gen.DOOption) emailTask {
	_emailTask := emailTask{}

	_emailTask.emailTaskDo.UseDB(db, opts...)
	_emailTask.emailTaskDo.UseModel(&model.EmlTask{})

	tableName := _emailTask.emailTaskDo.TableName()
	_emailTask.ALL = field.NewAsterisk(tableName)
	_emailTask.ID = field.NewInt64(tableName, "id")
	_emailTask.Cid = field.NewInt64(tableName, "cid")
	_emailTask.FromEmail = field.NewString(tableName, "from_email")
	_emailTask.Tag = field.NewString(tableName, "tag")
	_emailTask.TemplateID = field.NewInt64(tableName, "template_id")
	_emailTask.Status = field.NewString(tableName, "status")
	_emailTask.ProcessInfo = field.NewString(tableName, "process_info")
	_emailTask.Version = field.NewInt32(tableName, "version")
	_emailTask.FetchTime = field.NewTime(tableName, "fetch_time")
	_emailTask.TotalNum = field.NewInt32(tableName, "total_num")
	_emailTask.SuccessNum = field.NewInt32(tableName, "success_num")
	_emailTask.FailNum = field.NewInt32(tableName, "fail_num")
	_emailTask.InvalidNum = field.NewInt32(tableName, "invalid_num")
	_emailTask.PendingNum = field.NewInt32(tableName, "pending_num")
	_emailTask.OpenNum = field.NewInt32(tableName, "open_num")
	_emailTask.OpenNumDe = field.NewInt32(tableName, "open_num_de")
	_emailTask.ClickNum = field.NewInt32(tableName, "click_num")
	_emailTask.ClickNumDe = field.NewInt32(tableName, "click_num_de")
	_emailTask.UpdateTime = field.NewTime(tableName, "update_time")
	_emailTask.CreateTime = field.NewTime(tableName, "create_time")

	_emailTask.fillFieldMap()

	return _emailTask
}

type emailTask struct {
	emailTaskDo emailTaskDo

	ALL         field.Asterisk
	ID          field.Int64
	Cid         field.Int64  // 商户ID，关联商户
	FromEmail   field.String // 发信人地址
	Tag         field.String // 邮件标签: ["a","b","c"]
	TemplateID  field.Int64  // 模板ID
	Status      field.String // 发件任务状态（pending、processing、finished、invalid）
	ProcessInfo field.String // 发件任务处理信息
	Version     field.Int32  // 乐观锁
	FetchTime   field.Time   // 上次获取时间
	TotalNum    field.Int32  // 发件总数 等价于 收件人数量
	SuccessNum  field.Int32  // 成功发送的数量
	FailNum     field.Int32  // 邮件任务失败的数量
	InvalidNum  field.Int32  // 收件人地址有误总数
	PendingNum  field.Int32  // 等待被发送的邮件数量
	OpenNum     field.Int32  // 收到邮件后，打开邮件的行为
	OpenNumDe   field.Int32  // 对”打开”行为基于同一封邮件做去重
	ClickNum    field.Int32  // 收到邮件后，打开邮件后，点击了邮件中的URL
	ClickNumDe  field.Int32  // 对”点击”行为基于同一封邮件做去重
	UpdateTime  field.Time   // 更新时间
	CreateTime  field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (e emailTask) Table(newTableName string) *emailTask {
	e.emailTaskDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emailTask) As(alias string) *emailTask {
	e.emailTaskDo.DO = *(e.emailTaskDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emailTask) updateTableName(table string) *emailTask {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Cid = field.NewInt64(table, "cid")
	e.FromEmail = field.NewString(table, "from_email")
	e.Tag = field.NewString(table, "tag")
	e.TemplateID = field.NewInt64(table, "template_id")
	e.Status = field.NewString(table, "status")
	e.ProcessInfo = field.NewString(table, "process_info")
	e.Version = field.NewInt32(table, "version")
	e.FetchTime = field.NewTime(table, "fetch_time")
	e.TotalNum = field.NewInt32(table, "total_num")
	e.SuccessNum = field.NewInt32(table, "success_num")
	e.FailNum = field.NewInt32(table, "fail_num")
	e.InvalidNum = field.NewInt32(table, "invalid_num")
	e.PendingNum = field.NewInt32(table, "pending_num")
	e.OpenNum = field.NewInt32(table, "open_num")
	e.OpenNumDe = field.NewInt32(table, "open_num_de")
	e.ClickNum = field.NewInt32(table, "click_num")
	e.ClickNumDe = field.NewInt32(table, "click_num_de")
	e.UpdateTime = field.NewTime(table, "update_time")
	e.CreateTime = field.NewTime(table, "create_time")

	e.fillFieldMap()

	return e
}

func (e *emailTask) WithContext(ctx context.Context) *emailTaskDo {
	return e.emailTaskDo.WithContext(ctx)
}

func (e emailTask) TableName() string { return e.emailTaskDo.TableName() }

func (e emailTask) Alias() string { return e.emailTaskDo.Alias() }

func (e emailTask) Columns(cols ...field.Expr) gen.Columns { return e.emailTaskDo.Columns(cols...) }

func (e *emailTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emailTask) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 20)
	e.fieldMap["id"] = e.ID
	e.fieldMap["cid"] = e.Cid
	e.fieldMap["from_email"] = e.FromEmail
	e.fieldMap["tag"] = e.Tag
	e.fieldMap["template_id"] = e.TemplateID
	e.fieldMap["status"] = e.Status
	e.fieldMap["process_info"] = e.ProcessInfo
	e.fieldMap["version"] = e.Version
	e.fieldMap["fetch_time"] = e.FetchTime
	e.fieldMap["total_num"] = e.TotalNum
	e.fieldMap["success_num"] = e.SuccessNum
	e.fieldMap["fail_num"] = e.FailNum
	e.fieldMap["invalid_num"] = e.InvalidNum
	e.fieldMap["pending_num"] = e.PendingNum
	e.fieldMap["open_num"] = e.OpenNum
	e.fieldMap["open_num_de"] = e.OpenNumDe
	e.fieldMap["click_num"] = e.ClickNum
	e.fieldMap["click_num_de"] = e.ClickNumDe
	e.fieldMap["update_time"] = e.UpdateTime
	e.fieldMap["create_time"] = e.CreateTime
}

func (e emailTask) clone(db *gorm.DB) emailTask {
	e.emailTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e emailTask) replaceDB(db *gorm.DB) emailTask {
	e.emailTaskDo.ReplaceDB(db)
	return e
}

type emailTaskDo struct{ gen.DO }

func (e emailTaskDo) Debug() *emailTaskDo {
	return e.withDO(e.DO.Debug())
}

func (e emailTaskDo) WithContext(ctx context.Context) *emailTaskDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emailTaskDo) ReadDB() *emailTaskDo {
	return e.Clauses(dbresolver.Read)
}

func (e emailTaskDo) WriteDB() *emailTaskDo {
	return e.Clauses(dbresolver.Write)
}

func (e emailTaskDo) Session(config *gorm.Session) *emailTaskDo {
	return e.withDO(e.DO.Session(config))
}

func (e emailTaskDo) Clauses(conds ...clause.Expression) *emailTaskDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emailTaskDo) Returning(value interface{}, columns ...string) *emailTaskDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emailTaskDo) Not(conds ...gen.Condition) *emailTaskDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emailTaskDo) Or(conds ...gen.Condition) *emailTaskDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emailTaskDo) Select(conds ...field.Expr) *emailTaskDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emailTaskDo) Where(conds ...gen.Condition) *emailTaskDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emailTaskDo) Order(conds ...field.Expr) *emailTaskDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emailTaskDo) Distinct(cols ...field.Expr) *emailTaskDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emailTaskDo) Omit(cols ...field.Expr) *emailTaskDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emailTaskDo) Join(table schema.Tabler, on ...field.Expr) *emailTaskDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emailTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) *emailTaskDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emailTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) *emailTaskDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emailTaskDo) Group(cols ...field.Expr) *emailTaskDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emailTaskDo) Having(conds ...gen.Condition) *emailTaskDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emailTaskDo) Limit(limit int) *emailTaskDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emailTaskDo) Offset(offset int) *emailTaskDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emailTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *emailTaskDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emailTaskDo) Unscoped() *emailTaskDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emailTaskDo) Create(values ...*model.EmlTask) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emailTaskDo) CreateInBatches(values []*model.EmlTask, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emailTaskDo) Save(values ...*model.EmlTask) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emailTaskDo) First() (*model.EmlTask, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTask), nil
	}
}

func (e emailTaskDo) Take() (*model.EmlTask, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTask), nil
	}
}

func (e emailTaskDo) Last() (*model.EmlTask, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTask), nil
	}
}

func (e emailTaskDo) Find() ([]*model.EmlTask, error) {
	result, err := e.DO.Find()
	return result.([]*model.EmlTask), err
}

func (e emailTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmlTask, err error) {
	buf := make([]*model.EmlTask, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emailTaskDo) FindInBatches(result *[]*model.EmlTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emailTaskDo) Attrs(attrs ...field.AssignExpr) *emailTaskDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emailTaskDo) Assign(attrs ...field.AssignExpr) *emailTaskDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emailTaskDo) Joins(fields ...field.RelationField) *emailTaskDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emailTaskDo) Preload(fields ...field.RelationField) *emailTaskDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emailTaskDo) FirstOrInit() (*model.EmlTask, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTask), nil
	}
}

func (e emailTaskDo) FirstOrCreate() (*model.EmlTask, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTask), nil
	}
}

func (e emailTaskDo) FindByPage(offset int, limit int) (result []*model.EmlTask, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emailTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emailTaskDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emailTaskDo) Delete(models ...*model.EmlTask) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emailTaskDo) withDO(do gen.Dao) *emailTaskDo {
	e.DO = *do.(*gen.DO)
	return e
}
