// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"email/dal/model"
)

func newEmlTaskSub(db *gorm.DB, opts ...gen.DOOption) emlTaskSub {
	_emlTaskSub := emlTaskSub{}

	_emlTaskSub.emlTaskSubDo.UseDB(db, opts...)
	_emlTaskSub.emlTaskSubDo.UseModel(&model.EmlTaskSub{})

	tableName := _emlTaskSub.emlTaskSubDo.TableName()
	_emlTaskSub.ALL = field.NewAsterisk(tableName)
	_emlTaskSub.ID = field.NewInt64(tableName, "id")
	_emlTaskSub.Cid = field.NewInt64(tableName, "cid")
	_emlTaskSub.TaskID = field.NewInt64(tableName, "task_id")
	_emlTaskSub.FromEmail = field.NewString(tableName, "from_email")
	_emlTaskSub.ToUserID = field.NewString(tableName, "to_user_id")
	_emlTaskSub.ToEmail = field.NewString(tableName, "to_email")
	_emlTaskSub.TemplateID = field.NewInt64(tableName, "template_id")
	_emlTaskSub.Data = field.NewString(tableName, "data")
	_emlTaskSub.Status = field.NewString(tableName, "status")
	_emlTaskSub.Type = field.NewString(tableName, "type")
	_emlTaskSub.Priority = field.NewInt32(tableName, "priority")
	_emlTaskSub.Retry = field.NewInt32(tableName, "retry")
	_emlTaskSub.Version = field.NewInt32(tableName, "version")
	_emlTaskSub.FetchTime = field.NewTime(tableName, "fetch_time")
	_emlTaskSub.CodeSMTP = field.NewString(tableName, "code_smtp")
	_emlTaskSub.CodeDescription = field.NewString(tableName, "code_description")
	_emlTaskSub.SentTime = field.NewTime(tableName, "sent_time")
	_emlTaskSub.EmailDomain = field.NewString(tableName, "email_domain")
	_emlTaskSub.UpdateTime = field.NewTime(tableName, "update_time")
	_emlTaskSub.CreateTime = field.NewTime(tableName, "create_time")

	_emlTaskSub.fillFieldMap()

	return _emlTaskSub
}

type emlTaskSub struct {
	emlTaskSubDo emlTaskSubDo

	ALL             field.Asterisk
	ID              field.Int64
	Cid             field.Int64 // 关联商户 ID
	TaskID          field.Int64
	FromEmail       field.String // 发件人地址
	ToUserID        field.String // 收件人用户 ID
	ToEmail         field.String // 收件人邮箱
	TemplateID      field.Int64
	Data            field.String // 邮件内容变量
	Status          field.String // 任务状态(init、ing、fail、done、opened、clicked)
	Type            field.String // 邮件任务类型
	Priority        field.Int32  // 数值越小，优先级越高
	Retry           field.Int32  // 重试次数
	Version         field.Int32  // 乐观锁
	FetchTime       field.Time   // 上次获取事件
	CodeSMTP        field.String // smtp 服务器返回码
	CodeDescription field.String // 返回码描述
	SentTime        field.Time   // 发件时间
	EmailDomain     field.String // 收件域
	UpdateTime      field.Time   // 更新时间
	CreateTime      field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (e emlTaskSub) Table(newTableName string) *emlTaskSub {
	e.emlTaskSubDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emlTaskSub) As(alias string) *emlTaskSub {
	e.emlTaskSubDo.DO = *(e.emlTaskSubDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emlTaskSub) updateTableName(table string) *emlTaskSub {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Cid = field.NewInt64(table, "cid")
	e.TaskID = field.NewInt64(table, "task_id")
	e.FromEmail = field.NewString(table, "from_email")
	e.ToUserID = field.NewString(table, "to_user_id")
	e.ToEmail = field.NewString(table, "to_email")
	e.TemplateID = field.NewInt64(table, "template_id")
	e.Data = field.NewString(table, "data")
	e.Status = field.NewString(table, "status")
	e.Type = field.NewString(table, "type")
	e.Priority = field.NewInt32(table, "priority")
	e.Retry = field.NewInt32(table, "retry")
	e.Version = field.NewInt32(table, "version")
	e.FetchTime = field.NewTime(table, "fetch_time")
	e.CodeSMTP = field.NewString(table, "code_smtp")
	e.CodeDescription = field.NewString(table, "code_description")
	e.SentTime = field.NewTime(table, "sent_time")
	e.EmailDomain = field.NewString(table, "email_domain")
	e.UpdateTime = field.NewTime(table, "update_time")
	e.CreateTime = field.NewTime(table, "create_time")

	e.fillFieldMap()

	return e
}

func (e *emlTaskSub) WithContext(ctx context.Context) *emlTaskSubDo {
	return e.emlTaskSubDo.WithContext(ctx)
}

func (e emlTaskSub) TableName() string { return e.emlTaskSubDo.TableName() }

func (e emlTaskSub) Alias() string { return e.emlTaskSubDo.Alias() }

func (e emlTaskSub) Columns(cols ...field.Expr) gen.Columns { return e.emlTaskSubDo.Columns(cols...) }

func (e *emlTaskSub) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emlTaskSub) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 20)
	e.fieldMap["id"] = e.ID
	e.fieldMap["cid"] = e.Cid
	e.fieldMap["task_id"] = e.TaskID
	e.fieldMap["from_email"] = e.FromEmail
	e.fieldMap["to_user_id"] = e.ToUserID
	e.fieldMap["to_email"] = e.ToEmail
	e.fieldMap["template_id"] = e.TemplateID
	e.fieldMap["data"] = e.Data
	e.fieldMap["status"] = e.Status
	e.fieldMap["type"] = e.Type
	e.fieldMap["priority"] = e.Priority
	e.fieldMap["retry"] = e.Retry
	e.fieldMap["version"] = e.Version
	e.fieldMap["fetch_time"] = e.FetchTime
	e.fieldMap["code_smtp"] = e.CodeSMTP
	e.fieldMap["code_description"] = e.CodeDescription
	e.fieldMap["sent_time"] = e.SentTime
	e.fieldMap["email_domain"] = e.EmailDomain
	e.fieldMap["update_time"] = e.UpdateTime
	e.fieldMap["create_time"] = e.CreateTime
}

func (e emlTaskSub) clone(db *gorm.DB) emlTaskSub {
	e.emlTaskSubDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e emlTaskSub) replaceDB(db *gorm.DB) emlTaskSub {
	e.emlTaskSubDo.ReplaceDB(db)
	return e
}

type emlTaskSubDo struct{ gen.DO }

func (e emlTaskSubDo) Debug() *emlTaskSubDo {
	return e.withDO(e.DO.Debug())
}

func (e emlTaskSubDo) WithContext(ctx context.Context) *emlTaskSubDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emlTaskSubDo) ReadDB() *emlTaskSubDo {
	return e.Clauses(dbresolver.Read)
}

func (e emlTaskSubDo) WriteDB() *emlTaskSubDo {
	return e.Clauses(dbresolver.Write)
}

func (e emlTaskSubDo) Session(config *gorm.Session) *emlTaskSubDo {
	return e.withDO(e.DO.Session(config))
}

func (e emlTaskSubDo) Clauses(conds ...clause.Expression) *emlTaskSubDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emlTaskSubDo) Returning(value interface{}, columns ...string) *emlTaskSubDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emlTaskSubDo) Not(conds ...gen.Condition) *emlTaskSubDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emlTaskSubDo) Or(conds ...gen.Condition) *emlTaskSubDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emlTaskSubDo) Select(conds ...field.Expr) *emlTaskSubDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emlTaskSubDo) Where(conds ...gen.Condition) *emlTaskSubDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emlTaskSubDo) Order(conds ...field.Expr) *emlTaskSubDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emlTaskSubDo) Distinct(cols ...field.Expr) *emlTaskSubDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emlTaskSubDo) Omit(cols ...field.Expr) *emlTaskSubDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emlTaskSubDo) Join(table schema.Tabler, on ...field.Expr) *emlTaskSubDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emlTaskSubDo) LeftJoin(table schema.Tabler, on ...field.Expr) *emlTaskSubDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emlTaskSubDo) RightJoin(table schema.Tabler, on ...field.Expr) *emlTaskSubDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emlTaskSubDo) Group(cols ...field.Expr) *emlTaskSubDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emlTaskSubDo) Having(conds ...gen.Condition) *emlTaskSubDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emlTaskSubDo) Limit(limit int) *emlTaskSubDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emlTaskSubDo) Offset(offset int) *emlTaskSubDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emlTaskSubDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *emlTaskSubDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emlTaskSubDo) Unscoped() *emlTaskSubDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emlTaskSubDo) Create(values ...*model.EmlTaskSub) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emlTaskSubDo) CreateInBatches(values []*model.EmlTaskSub, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emlTaskSubDo) Save(values ...*model.EmlTaskSub) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emlTaskSubDo) First() (*model.EmlTaskSub, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTaskSub), nil
	}
}

func (e emlTaskSubDo) Take() (*model.EmlTaskSub, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTaskSub), nil
	}
}

func (e emlTaskSubDo) Last() (*model.EmlTaskSub, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTaskSub), nil
	}
}

func (e emlTaskSubDo) Find() ([]*model.EmlTaskSub, error) {
	result, err := e.DO.Find()
	return result.([]*model.EmlTaskSub), err
}

func (e emlTaskSubDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmlTaskSub, err error) {
	buf := make([]*model.EmlTaskSub, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emlTaskSubDo) FindInBatches(result *[]*model.EmlTaskSub, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emlTaskSubDo) Attrs(attrs ...field.AssignExpr) *emlTaskSubDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emlTaskSubDo) Assign(attrs ...field.AssignExpr) *emlTaskSubDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emlTaskSubDo) Joins(fields ...field.RelationField) *emlTaskSubDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emlTaskSubDo) Preload(fields ...field.RelationField) *emlTaskSubDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emlTaskSubDo) FirstOrInit() (*model.EmlTaskSub, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTaskSub), nil
	}
}

func (e emlTaskSubDo) FirstOrCreate() (*model.EmlTaskSub, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTaskSub), nil
	}
}

func (e emlTaskSubDo) FindByPage(offset int, limit int) (result []*model.EmlTaskSub, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emlTaskSubDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emlTaskSubDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emlTaskSubDo) Delete(models ...*model.EmlTaskSub) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emlTaskSubDo) withDO(do gen.Dao) *emlTaskSubDo {
	e.DO = *do.(*gen.DO)
	return e
}
