// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"email/dal/model"
)

func newEmlSysUser(db *gorm.DB, opts ...gen.DOOption) emlSysUser {
	_emlSysUser := emlSysUser{}

	_emlSysUser.emlSysUserDo.UseDB(db, opts...)
	_emlSysUser.emlSysUserDo.UseModel(&model.EmlSysUser{})

	tableName := _emlSysUser.emlSysUserDo.TableName()
	_emlSysUser.ALL = field.NewAsterisk(tableName)
	_emlSysUser.ID = field.NewInt64(tableName, "id")
	_emlSysUser.Cid = field.NewInt64(tableName, "cid")
	_emlSysUser.Type = field.NewString(tableName, "type")
	_emlSysUser.Host = field.NewString(tableName, "host")
	_emlSysUser.EmailServer = field.NewString(tableName, "email_server")
	_emlSysUser.Port = field.NewInt32(tableName, "port")
	_emlSysUser.Username = field.NewString(tableName, "username")
	_emlSysUser.DefaultSpeed = field.NewString(tableName, "default_speed")
	_emlSysUser.Password = field.NewString(tableName, "password")
	_emlSysUser.FetchStartTime = field.NewTime(tableName, "fetch_start_time")
	_emlSysUser.AccessKeyID = field.NewString(tableName, "access_key_id")
	_emlSysUser.AccessKeySecret = field.NewString(tableName, "access_key_secret")
	_emlSysUser.FromAddress = field.NewString(tableName, "from_address")
	_emlSysUser.ReplyTo = field.NewString(tableName, "reply_to")
	_emlSysUser.EventTrack = field.NewString(tableName, "event_track")
	_emlSysUser.UpdateTime = field.NewTime(tableName, "update_time")
	_emlSysUser.CreateTime = field.NewTime(tableName, "create_time")

	_emlSysUser.fillFieldMap()

	return _emlSysUser
}

// emlSysUser 系统级用户关于邮件的配置信息
type emlSysUser struct {
	emlSysUserDo emlSysUserDo

	ALL             field.Asterisk
	ID              field.Int64
	Cid             field.Int64  // 商户ID，关联商户
	Type            field.String // 邮件账号用途（common营销、redemption兑换码）
	Host            field.String // smtp 服务器
	EmailServer     field.String // 服务商
	Port            field.Int32  // 端口
	Username        field.String // smtp服务用户名
	DefaultSpeed    field.String // 默认发件速度
	Password        field.String // 对称加密后的密码（授权码）
	FetchStartTime  field.Time   // 爬取任务起始时间
	AccessKeyID     field.String
	AccessKeySecret field.String
	FromAddress     field.String // 发件人地址
	ReplyTo         field.String // 回信地址
	EventTrack      field.String // 埋点事件变量，以 json 形式存储。存储内容为 kv 键值对数组
	UpdateTime      field.Time   // 更新时间
	CreateTime      field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (e emlSysUser) Table(newTableName string) *emlSysUser {
	e.emlSysUserDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emlSysUser) As(alias string) *emlSysUser {
	e.emlSysUserDo.DO = *(e.emlSysUserDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emlSysUser) updateTableName(table string) *emlSysUser {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Cid = field.NewInt64(table, "cid")
	e.Type = field.NewString(table, "type")
	e.Host = field.NewString(table, "host")
	e.EmailServer = field.NewString(table, "email_server")
	e.Port = field.NewInt32(table, "port")
	e.Username = field.NewString(table, "username")
	e.DefaultSpeed = field.NewString(table, "default_speed")
	e.Password = field.NewString(table, "password")
	e.FetchStartTime = field.NewTime(table, "fetch_start_time")
	e.AccessKeyID = field.NewString(table, "access_key_id")
	e.AccessKeySecret = field.NewString(table, "access_key_secret")
	e.FromAddress = field.NewString(table, "from_address")
	e.ReplyTo = field.NewString(table, "reply_to")
	e.EventTrack = field.NewString(table, "event_track")
	e.UpdateTime = field.NewTime(table, "update_time")
	e.CreateTime = field.NewTime(table, "create_time")

	e.fillFieldMap()

	return e
}

func (e *emlSysUser) WithContext(ctx context.Context) *emlSysUserDo {
	return e.emlSysUserDo.WithContext(ctx)
}

func (e emlSysUser) TableName() string { return e.emlSysUserDo.TableName() }

func (e emlSysUser) Alias() string { return e.emlSysUserDo.Alias() }

func (e emlSysUser) Columns(cols ...field.Expr) gen.Columns { return e.emlSysUserDo.Columns(cols...) }

func (e *emlSysUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emlSysUser) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 17)
	e.fieldMap["id"] = e.ID
	e.fieldMap["cid"] = e.Cid
	e.fieldMap["type"] = e.Type
	e.fieldMap["host"] = e.Host
	e.fieldMap["email_server"] = e.EmailServer
	e.fieldMap["port"] = e.Port
	e.fieldMap["username"] = e.Username
	e.fieldMap["default_speed"] = e.DefaultSpeed
	e.fieldMap["password"] = e.Password
	e.fieldMap["fetch_start_time"] = e.FetchStartTime
	e.fieldMap["access_key_id"] = e.AccessKeyID
	e.fieldMap["access_key_secret"] = e.AccessKeySecret
	e.fieldMap["from_address"] = e.FromAddress
	e.fieldMap["reply_to"] = e.ReplyTo
	e.fieldMap["event_track"] = e.EventTrack
	e.fieldMap["update_time"] = e.UpdateTime
	e.fieldMap["create_time"] = e.CreateTime
}

func (e emlSysUser) clone(db *gorm.DB) emlSysUser {
	e.emlSysUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e emlSysUser) replaceDB(db *gorm.DB) emlSysUser {
	e.emlSysUserDo.ReplaceDB(db)
	return e
}

type emlSysUserDo struct{ gen.DO }

func (e emlSysUserDo) Debug() *emlSysUserDo {
	return e.withDO(e.DO.Debug())
}

func (e emlSysUserDo) WithContext(ctx context.Context) *emlSysUserDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emlSysUserDo) ReadDB() *emlSysUserDo {
	return e.Clauses(dbresolver.Read)
}

func (e emlSysUserDo) WriteDB() *emlSysUserDo {
	return e.Clauses(dbresolver.Write)
}

func (e emlSysUserDo) Session(config *gorm.Session) *emlSysUserDo {
	return e.withDO(e.DO.Session(config))
}

func (e emlSysUserDo) Clauses(conds ...clause.Expression) *emlSysUserDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emlSysUserDo) Returning(value interface{}, columns ...string) *emlSysUserDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emlSysUserDo) Not(conds ...gen.Condition) *emlSysUserDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emlSysUserDo) Or(conds ...gen.Condition) *emlSysUserDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emlSysUserDo) Select(conds ...field.Expr) *emlSysUserDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emlSysUserDo) Where(conds ...gen.Condition) *emlSysUserDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emlSysUserDo) Order(conds ...field.Expr) *emlSysUserDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emlSysUserDo) Distinct(cols ...field.Expr) *emlSysUserDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emlSysUserDo) Omit(cols ...field.Expr) *emlSysUserDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emlSysUserDo) Join(table schema.Tabler, on ...field.Expr) *emlSysUserDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emlSysUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *emlSysUserDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emlSysUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *emlSysUserDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emlSysUserDo) Group(cols ...field.Expr) *emlSysUserDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emlSysUserDo) Having(conds ...gen.Condition) *emlSysUserDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emlSysUserDo) Limit(limit int) *emlSysUserDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emlSysUserDo) Offset(offset int) *emlSysUserDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emlSysUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *emlSysUserDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emlSysUserDo) Unscoped() *emlSysUserDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emlSysUserDo) Create(values ...*model.EmlSysUser) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emlSysUserDo) CreateInBatches(values []*model.EmlSysUser, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emlSysUserDo) Save(values ...*model.EmlSysUser) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emlSysUserDo) First() (*model.EmlSysUser, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlSysUser), nil
	}
}

func (e emlSysUserDo) Take() (*model.EmlSysUser, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlSysUser), nil
	}
}

func (e emlSysUserDo) Last() (*model.EmlSysUser, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlSysUser), nil
	}
}

func (e emlSysUserDo) Find() ([]*model.EmlSysUser, error) {
	result, err := e.DO.Find()
	return result.([]*model.EmlSysUser), err
}

func (e emlSysUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmlSysUser, err error) {
	buf := make([]*model.EmlSysUser, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emlSysUserDo) FindInBatches(result *[]*model.EmlSysUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emlSysUserDo) Attrs(attrs ...field.AssignExpr) *emlSysUserDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emlSysUserDo) Assign(attrs ...field.AssignExpr) *emlSysUserDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emlSysUserDo) Joins(fields ...field.RelationField) *emlSysUserDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emlSysUserDo) Preload(fields ...field.RelationField) *emlSysUserDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emlSysUserDo) FirstOrInit() (*model.EmlSysUser, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlSysUser), nil
	}
}

func (e emlSysUserDo) FirstOrCreate() (*model.EmlSysUser, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlSysUser), nil
	}
}

func (e emlSysUserDo) FindByPage(offset int, limit int) (result []*model.EmlSysUser, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emlSysUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emlSysUserDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emlSysUserDo) Delete(models ...*model.EmlSysUser) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emlSysUserDo) withDO(do gen.Dao) *emlSysUserDo {
	e.DO = *do.(*gen.DO)
	return e
}
