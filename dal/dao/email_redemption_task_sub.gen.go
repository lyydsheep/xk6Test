// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"email/dal/model"
)

func newEmailRedemptionTaskSub(db *gorm.DB, opts ...gen.DOOption) emailRedemptionTaskSub {
	_emailRedemptionTaskSub := emailRedemptionTaskSub{}

	_emailRedemptionTaskSub.emailRedemptionTaskSubDo.UseDB(db, opts...)
	_emailRedemptionTaskSub.emailRedemptionTaskSubDo.UseModel(&model.EmlRedemptionTaskSub{})

	tableName := _emailRedemptionTaskSub.emailRedemptionTaskSubDo.TableName()
	_emailRedemptionTaskSub.ALL = field.NewAsterisk(tableName)
	_emailRedemptionTaskSub.ID = field.NewInt64(tableName, "id")
	_emailRedemptionTaskSub.Cid = field.NewInt64(tableName, "cid")
	_emailRedemptionTaskSub.TaskSubID = field.NewInt64(tableName, "task_sub_id")
	_emailRedemptionTaskSub.Type = field.NewString(tableName, "type")
	_emailRedemptionTaskSub.Amount = field.NewInt32(tableName, "amount")
	_emailRedemptionTaskSub.PaymentID = field.NewString(tableName, "payment_id")

	_emailRedemptionTaskSub.fillFieldMap()

	return _emailRedemptionTaskSub
}

// emailRedemptionTaskSub 记录兑换码信息和邮件任务关系
type emailRedemptionTaskSub struct {
	emailRedemptionTaskSubDo emailRedemptionTaskSubDo

	ALL       field.Asterisk
	ID        field.Int64
	Cid       field.Int64  // 商户ID
	TaskSubID field.Int64  // 邮件任务 ID
	Type      field.String // 目标兑换码类型
	Amount    field.Int32  // 目标兑换码的兑换值
	PaymentID field.String

	fieldMap map[string]field.Expr
}

func (e emailRedemptionTaskSub) Table(newTableName string) *emailRedemptionTaskSub {
	e.emailRedemptionTaskSubDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emailRedemptionTaskSub) As(alias string) *emailRedemptionTaskSub {
	e.emailRedemptionTaskSubDo.DO = *(e.emailRedemptionTaskSubDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emailRedemptionTaskSub) updateTableName(table string) *emailRedemptionTaskSub {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Cid = field.NewInt64(table, "cid")
	e.TaskSubID = field.NewInt64(table, "task_sub_id")
	e.Type = field.NewString(table, "type")
	e.Amount = field.NewInt32(table, "amount")
	e.PaymentID = field.NewString(table, "payment_id")

	e.fillFieldMap()

	return e
}

func (e *emailRedemptionTaskSub) WithContext(ctx context.Context) *emailRedemptionTaskSubDo {
	return e.emailRedemptionTaskSubDo.WithContext(ctx)
}

func (e emailRedemptionTaskSub) TableName() string { return e.emailRedemptionTaskSubDo.TableName() }

func (e emailRedemptionTaskSub) Alias() string { return e.emailRedemptionTaskSubDo.Alias() }

func (e emailRedemptionTaskSub) Columns(cols ...field.Expr) gen.Columns {
	return e.emailRedemptionTaskSubDo.Columns(cols...)
}

func (e *emailRedemptionTaskSub) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emailRedemptionTaskSub) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["cid"] = e.Cid
	e.fieldMap["task_sub_id"] = e.TaskSubID
	e.fieldMap["type"] = e.Type
	e.fieldMap["amount"] = e.Amount
	e.fieldMap["payment_id"] = e.PaymentID
}

func (e emailRedemptionTaskSub) clone(db *gorm.DB) emailRedemptionTaskSub {
	e.emailRedemptionTaskSubDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e emailRedemptionTaskSub) replaceDB(db *gorm.DB) emailRedemptionTaskSub {
	e.emailRedemptionTaskSubDo.ReplaceDB(db)
	return e
}

type emailRedemptionTaskSubDo struct{ gen.DO }

func (e emailRedemptionTaskSubDo) Debug() *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Debug())
}

func (e emailRedemptionTaskSubDo) WithContext(ctx context.Context) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emailRedemptionTaskSubDo) ReadDB() *emailRedemptionTaskSubDo {
	return e.Clauses(dbresolver.Read)
}

func (e emailRedemptionTaskSubDo) WriteDB() *emailRedemptionTaskSubDo {
	return e.Clauses(dbresolver.Write)
}

func (e emailRedemptionTaskSubDo) Session(config *gorm.Session) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Session(config))
}

func (e emailRedemptionTaskSubDo) Clauses(conds ...clause.Expression) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emailRedemptionTaskSubDo) Returning(value interface{}, columns ...string) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emailRedemptionTaskSubDo) Not(conds ...gen.Condition) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emailRedemptionTaskSubDo) Or(conds ...gen.Condition) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emailRedemptionTaskSubDo) Select(conds ...field.Expr) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emailRedemptionTaskSubDo) Where(conds ...gen.Condition) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emailRedemptionTaskSubDo) Order(conds ...field.Expr) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emailRedemptionTaskSubDo) Distinct(cols ...field.Expr) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emailRedemptionTaskSubDo) Omit(cols ...field.Expr) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emailRedemptionTaskSubDo) Join(table schema.Tabler, on ...field.Expr) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emailRedemptionTaskSubDo) LeftJoin(table schema.Tabler, on ...field.Expr) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emailRedemptionTaskSubDo) RightJoin(table schema.Tabler, on ...field.Expr) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emailRedemptionTaskSubDo) Group(cols ...field.Expr) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emailRedemptionTaskSubDo) Having(conds ...gen.Condition) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emailRedemptionTaskSubDo) Limit(limit int) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emailRedemptionTaskSubDo) Offset(offset int) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emailRedemptionTaskSubDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emailRedemptionTaskSubDo) Unscoped() *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emailRedemptionTaskSubDo) Create(values ...*model.EmlRedemptionTaskSub) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emailRedemptionTaskSubDo) CreateInBatches(values []*model.EmlRedemptionTaskSub, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emailRedemptionTaskSubDo) Save(values ...*model.EmlRedemptionTaskSub) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emailRedemptionTaskSubDo) First() (*model.EmlRedemptionTaskSub, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlRedemptionTaskSub), nil
	}
}

func (e emailRedemptionTaskSubDo) Take() (*model.EmlRedemptionTaskSub, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlRedemptionTaskSub), nil
	}
}

func (e emailRedemptionTaskSubDo) Last() (*model.EmlRedemptionTaskSub, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlRedemptionTaskSub), nil
	}
}

func (e emailRedemptionTaskSubDo) Find() ([]*model.EmlRedemptionTaskSub, error) {
	result, err := e.DO.Find()
	return result.([]*model.EmlRedemptionTaskSub), err
}

func (e emailRedemptionTaskSubDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmlRedemptionTaskSub, err error) {
	buf := make([]*model.EmlRedemptionTaskSub, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emailRedemptionTaskSubDo) FindInBatches(result *[]*model.EmlRedemptionTaskSub, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emailRedemptionTaskSubDo) Attrs(attrs ...field.AssignExpr) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emailRedemptionTaskSubDo) Assign(attrs ...field.AssignExpr) *emailRedemptionTaskSubDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emailRedemptionTaskSubDo) Joins(fields ...field.RelationField) *emailRedemptionTaskSubDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emailRedemptionTaskSubDo) Preload(fields ...field.RelationField) *emailRedemptionTaskSubDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emailRedemptionTaskSubDo) FirstOrInit() (*model.EmlRedemptionTaskSub, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlRedemptionTaskSub), nil
	}
}

func (e emailRedemptionTaskSubDo) FirstOrCreate() (*model.EmlRedemptionTaskSub, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlRedemptionTaskSub), nil
	}
}

func (e emailRedemptionTaskSubDo) FindByPage(offset int, limit int) (result []*model.EmlRedemptionTaskSub, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emailRedemptionTaskSubDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emailRedemptionTaskSubDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emailRedemptionTaskSubDo) Delete(models ...*model.EmlRedemptionTaskSub) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emailRedemptionTaskSubDo) withDO(do gen.Dao) *emailRedemptionTaskSubDo {
	e.DO = *do.(*gen.DO)
	return e
}
