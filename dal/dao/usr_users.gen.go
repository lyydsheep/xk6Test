// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"email/dal/model"
)

func newUsrUser(db *gorm.DB, opts ...gen.DOOption) usrUser {
	_usrUser := usrUser{}

	_usrUser.usrUserDo.UseDB(db, opts...)
	_usrUser.usrUserDo.UseModel(&model.UsrUser{})

	tableName := _usrUser.usrUserDo.TableName()
	_usrUser.ALL = field.NewAsterisk(tableName)
	_usrUser.ID = field.NewInt64(tableName, "id")
	_usrUser.UserID = field.NewString(tableName, "user_id")
	_usrUser.FullName = field.NewString(tableName, "full_name")
	_usrUser.FirstName = field.NewString(tableName, "first_name")
	_usrUser.MiddleName = field.NewString(tableName, "middle_name")
	_usrUser.LastName = field.NewString(tableName, "last_name")
	_usrUser.Email = field.NewString(tableName, "email")
	_usrUser.Language = field.NewString(tableName, "language")
	_usrUser.LastIP = field.NewString(tableName, "last_ip")
	_usrUser.LastHostname = field.NewString(tableName, "last_hostname")
	_usrUser.LastLoginTime = field.NewTime(tableName, "last_login_time")
	_usrUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_usrUser.CreatedAt = field.NewTime(tableName, "created_at")
	_usrUser.DeletedAt = field.NewField(tableName, "deleted_at")
	_usrUser.Cid = field.NewInt64(tableName, "cid")
	_usrUser.GmtCreate = field.NewTime(tableName, "gmt_create")
	_usrUser.GmtUpdate = field.NewTime(tableName, "gmt_update")
	_usrUser.Tags = field.NewString(tableName, "tags")

	_usrUser.fillFieldMap()

	return _usrUser
}

type usrUser struct {
	usrUserDo usrUserDo

	ALL           field.Asterisk
	ID            field.Int64
	UserID        field.String // 商户平台的用户唯一id
	FullName      field.String // 全名
	FirstName     field.String // 名字
	MiddleName    field.String // 中间名
	LastName      field.String // 姓氏
	Email         field.String // 电子邮件
	Language      field.String // 用户默认语言
	LastIP        field.String // 用户最近一次登录ip
	LastHostname  field.String // 用户最近一次登录的hostname
	LastLoginTime field.Time   // 用户最近一次登录时间
	UpdatedAt     field.Time   // 用户更新时间
	CreatedAt     field.Time   // 用户创建时间
	DeletedAt     field.Field  // 用户删除时间
	Cid           field.Int64  // 数据所属的商户id
	GmtCreate     field.Time   // 创建时间
	GmtUpdate     field.Time   // 更新时间
	Tags          field.String // 用户标签，可以有多个，存储形式["a","b","c"]

	fieldMap map[string]field.Expr
}

func (u usrUser) Table(newTableName string) *usrUser {
	u.usrUserDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u usrUser) As(alias string) *usrUser {
	u.usrUserDo.DO = *(u.usrUserDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *usrUser) updateTableName(table string) *usrUser {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewString(table, "user_id")
	u.FullName = field.NewString(table, "full_name")
	u.FirstName = field.NewString(table, "first_name")
	u.MiddleName = field.NewString(table, "middle_name")
	u.LastName = field.NewString(table, "last_name")
	u.Email = field.NewString(table, "email")
	u.Language = field.NewString(table, "language")
	u.LastIP = field.NewString(table, "last_ip")
	u.LastHostname = field.NewString(table, "last_hostname")
	u.LastLoginTime = field.NewTime(table, "last_login_time")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.Cid = field.NewInt64(table, "cid")
	u.GmtCreate = field.NewTime(table, "gmt_create")
	u.GmtUpdate = field.NewTime(table, "gmt_update")
	u.Tags = field.NewString(table, "tags")

	u.fillFieldMap()

	return u
}

func (u *usrUser) WithContext(ctx context.Context) *usrUserDo { return u.usrUserDo.WithContext(ctx) }

func (u usrUser) TableName() string { return u.usrUserDo.TableName() }

func (u usrUser) Alias() string { return u.usrUserDo.Alias() }

func (u usrUser) Columns(cols ...field.Expr) gen.Columns { return u.usrUserDo.Columns(cols...) }

func (u *usrUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *usrUser) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 18)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["full_name"] = u.FullName
	u.fieldMap["first_name"] = u.FirstName
	u.fieldMap["middle_name"] = u.MiddleName
	u.fieldMap["last_name"] = u.LastName
	u.fieldMap["email"] = u.Email
	u.fieldMap["language"] = u.Language
	u.fieldMap["last_ip"] = u.LastIP
	u.fieldMap["last_hostname"] = u.LastHostname
	u.fieldMap["last_login_time"] = u.LastLoginTime
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["cid"] = u.Cid
	u.fieldMap["gmt_create"] = u.GmtCreate
	u.fieldMap["gmt_update"] = u.GmtUpdate
	u.fieldMap["tags"] = u.Tags
}

func (u usrUser) clone(db *gorm.DB) usrUser {
	u.usrUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u usrUser) replaceDB(db *gorm.DB) usrUser {
	u.usrUserDo.ReplaceDB(db)
	return u
}

type usrUserDo struct{ gen.DO }

func (u usrUserDo) Debug() *usrUserDo {
	return u.withDO(u.DO.Debug())
}

func (u usrUserDo) WithContext(ctx context.Context) *usrUserDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u usrUserDo) ReadDB() *usrUserDo {
	return u.Clauses(dbresolver.Read)
}

func (u usrUserDo) WriteDB() *usrUserDo {
	return u.Clauses(dbresolver.Write)
}

func (u usrUserDo) Session(config *gorm.Session) *usrUserDo {
	return u.withDO(u.DO.Session(config))
}

func (u usrUserDo) Clauses(conds ...clause.Expression) *usrUserDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u usrUserDo) Returning(value interface{}, columns ...string) *usrUserDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u usrUserDo) Not(conds ...gen.Condition) *usrUserDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u usrUserDo) Or(conds ...gen.Condition) *usrUserDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u usrUserDo) Select(conds ...field.Expr) *usrUserDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u usrUserDo) Where(conds ...gen.Condition) *usrUserDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u usrUserDo) Order(conds ...field.Expr) *usrUserDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u usrUserDo) Distinct(cols ...field.Expr) *usrUserDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u usrUserDo) Omit(cols ...field.Expr) *usrUserDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u usrUserDo) Join(table schema.Tabler, on ...field.Expr) *usrUserDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u usrUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *usrUserDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u usrUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *usrUserDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u usrUserDo) Group(cols ...field.Expr) *usrUserDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u usrUserDo) Having(conds ...gen.Condition) *usrUserDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u usrUserDo) Limit(limit int) *usrUserDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u usrUserDo) Offset(offset int) *usrUserDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u usrUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *usrUserDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u usrUserDo) Unscoped() *usrUserDo {
	return u.withDO(u.DO.Unscoped())
}

func (u usrUserDo) Create(values ...*model.UsrUser) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u usrUserDo) CreateInBatches(values []*model.UsrUser, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u usrUserDo) Save(values ...*model.UsrUser) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u usrUserDo) First() (*model.UsrUser, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsrUser), nil
	}
}

func (u usrUserDo) Take() (*model.UsrUser, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsrUser), nil
	}
}

func (u usrUserDo) Last() (*model.UsrUser, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsrUser), nil
	}
}

func (u usrUserDo) Find() ([]*model.UsrUser, error) {
	result, err := u.DO.Find()
	return result.([]*model.UsrUser), err
}

func (u usrUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UsrUser, err error) {
	buf := make([]*model.UsrUser, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u usrUserDo) FindInBatches(result *[]*model.UsrUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u usrUserDo) Attrs(attrs ...field.AssignExpr) *usrUserDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u usrUserDo) Assign(attrs ...field.AssignExpr) *usrUserDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u usrUserDo) Joins(fields ...field.RelationField) *usrUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u usrUserDo) Preload(fields ...field.RelationField) *usrUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u usrUserDo) FirstOrInit() (*model.UsrUser, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsrUser), nil
	}
}

func (u usrUserDo) FirstOrCreate() (*model.UsrUser, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsrUser), nil
	}
}

func (u usrUserDo) FindByPage(offset int, limit int) (result []*model.UsrUser, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u usrUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u usrUserDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u usrUserDo) Delete(models ...*model.UsrUser) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *usrUserDo) withDO(do gen.Dao) *usrUserDo {
	u.DO = *do.(*gen.DO)
	return u
}
