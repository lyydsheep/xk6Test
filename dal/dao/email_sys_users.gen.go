// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"email/dal/model"
)

func newEmailSysUser(db *gorm.DB, opts ...gen.DOOption) emailSysUser {
	_emailSysUser := emailSysUser{}

	_emailSysUser.emailSysUserDo.UseDB(db, opts...)
	_emailSysUser.emailSysUserDo.UseModel(&model.EmlSysUser{})

	tableName := _emailSysUser.emailSysUserDo.TableName()
	_emailSysUser.ALL = field.NewAsterisk(tableName)
	_emailSysUser.ID = field.NewInt64(tableName, "id")
	_emailSysUser.Cid = field.NewInt64(tableName, "cid")
	_emailSysUser.Type = field.NewString(tableName, "type")
	_emailSysUser.Host = field.NewString(tableName, "host")
	_emailSysUser.Port = field.NewInt32(tableName, "port")
	_emailSysUser.Username = field.NewString(tableName, "username")
	_emailSysUser.Password = field.NewString(tableName, "password")
	_emailSysUser.FromAddress = field.NewString(tableName, "from_address")
	_emailSysUser.ReplyTo = field.NewString(tableName, "reply_to")
	_emailSysUser.EventTrack = field.NewString(tableName, "event_track")
	_emailSysUser.UpdateTime = field.NewTime(tableName, "update_time")
	_emailSysUser.CreateTime = field.NewTime(tableName, "create_time")

	_emailSysUser.fillFieldMap()

	return _emailSysUser
}

// emailSysUser 系统级用户关于邮件的配置信息
type emailSysUser struct {
	emailSysUserDo emailSysUserDo

	ALL         field.Asterisk
	ID          field.Int64
	Cid         field.Int64  // 商户ID，关联商户
	Type        field.String // 邮件账号用途（common营销、redemption兑换码）
	Host        field.String // smtp 服务器
	Port        field.Int32  // 端口
	Username    field.String // smtp服务用户名
	Password    field.String // 对称加密后的密码（授权码）
	FromAddress field.String // 发件人地址
	ReplyTo     field.String // 回信地址
	EventTrack  field.String // 埋点事件变量，以 json 形式存储。存储内容为 kv 键值对数组
	UpdateTime  field.Time   // 更新时间
	CreateTime  field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (e emailSysUser) Table(newTableName string) *emailSysUser {
	e.emailSysUserDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emailSysUser) As(alias string) *emailSysUser {
	e.emailSysUserDo.DO = *(e.emailSysUserDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emailSysUser) updateTableName(table string) *emailSysUser {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Cid = field.NewInt64(table, "cid")
	e.Type = field.NewString(table, "type")
	e.Host = field.NewString(table, "host")
	e.Port = field.NewInt32(table, "port")
	e.Username = field.NewString(table, "username")
	e.Password = field.NewString(table, "password")
	e.FromAddress = field.NewString(table, "from_address")
	e.ReplyTo = field.NewString(table, "reply_to")
	e.EventTrack = field.NewString(table, "event_track")
	e.UpdateTime = field.NewTime(table, "update_time")
	e.CreateTime = field.NewTime(table, "create_time")

	e.fillFieldMap()

	return e
}

func (e *emailSysUser) WithContext(ctx context.Context) *emailSysUserDo {
	return e.emailSysUserDo.WithContext(ctx)
}

func (e emailSysUser) TableName() string { return e.emailSysUserDo.TableName() }

func (e emailSysUser) Alias() string { return e.emailSysUserDo.Alias() }

func (e emailSysUser) Columns(cols ...field.Expr) gen.Columns {
	return e.emailSysUserDo.Columns(cols...)
}

func (e *emailSysUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emailSysUser) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 12)
	e.fieldMap["id"] = e.ID
	e.fieldMap["cid"] = e.Cid
	e.fieldMap["type"] = e.Type
	e.fieldMap["host"] = e.Host
	e.fieldMap["port"] = e.Port
	e.fieldMap["username"] = e.Username
	e.fieldMap["password"] = e.Password
	e.fieldMap["from_address"] = e.FromAddress
	e.fieldMap["reply_to"] = e.ReplyTo
	e.fieldMap["event_track"] = e.EventTrack
	e.fieldMap["update_time"] = e.UpdateTime
	e.fieldMap["create_time"] = e.CreateTime
}

func (e emailSysUser) clone(db *gorm.DB) emailSysUser {
	e.emailSysUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e emailSysUser) replaceDB(db *gorm.DB) emailSysUser {
	e.emailSysUserDo.ReplaceDB(db)
	return e
}

type emailSysUserDo struct{ gen.DO }

func (e emailSysUserDo) Debug() *emailSysUserDo {
	return e.withDO(e.DO.Debug())
}

func (e emailSysUserDo) WithContext(ctx context.Context) *emailSysUserDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emailSysUserDo) ReadDB() *emailSysUserDo {
	return e.Clauses(dbresolver.Read)
}

func (e emailSysUserDo) WriteDB() *emailSysUserDo {
	return e.Clauses(dbresolver.Write)
}

func (e emailSysUserDo) Session(config *gorm.Session) *emailSysUserDo {
	return e.withDO(e.DO.Session(config))
}

func (e emailSysUserDo) Clauses(conds ...clause.Expression) *emailSysUserDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emailSysUserDo) Returning(value interface{}, columns ...string) *emailSysUserDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emailSysUserDo) Not(conds ...gen.Condition) *emailSysUserDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emailSysUserDo) Or(conds ...gen.Condition) *emailSysUserDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emailSysUserDo) Select(conds ...field.Expr) *emailSysUserDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emailSysUserDo) Where(conds ...gen.Condition) *emailSysUserDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emailSysUserDo) Order(conds ...field.Expr) *emailSysUserDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emailSysUserDo) Distinct(cols ...field.Expr) *emailSysUserDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emailSysUserDo) Omit(cols ...field.Expr) *emailSysUserDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emailSysUserDo) Join(table schema.Tabler, on ...field.Expr) *emailSysUserDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emailSysUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *emailSysUserDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emailSysUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *emailSysUserDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emailSysUserDo) Group(cols ...field.Expr) *emailSysUserDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emailSysUserDo) Having(conds ...gen.Condition) *emailSysUserDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emailSysUserDo) Limit(limit int) *emailSysUserDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emailSysUserDo) Offset(offset int) *emailSysUserDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emailSysUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *emailSysUserDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emailSysUserDo) Unscoped() *emailSysUserDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emailSysUserDo) Create(values ...*model.EmlSysUser) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emailSysUserDo) CreateInBatches(values []*model.EmlSysUser, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emailSysUserDo) Save(values ...*model.EmlSysUser) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emailSysUserDo) First() (*model.EmlSysUser, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlSysUser), nil
	}
}

func (e emailSysUserDo) Take() (*model.EmlSysUser, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlSysUser), nil
	}
}

func (e emailSysUserDo) Last() (*model.EmlSysUser, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlSysUser), nil
	}
}

func (e emailSysUserDo) Find() ([]*model.EmlSysUser, error) {
	result, err := e.DO.Find()
	return result.([]*model.EmlSysUser), err
}

func (e emailSysUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmlSysUser, err error) {
	buf := make([]*model.EmlSysUser, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emailSysUserDo) FindInBatches(result *[]*model.EmlSysUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emailSysUserDo) Attrs(attrs ...field.AssignExpr) *emailSysUserDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emailSysUserDo) Assign(attrs ...field.AssignExpr) *emailSysUserDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emailSysUserDo) Joins(fields ...field.RelationField) *emailSysUserDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emailSysUserDo) Preload(fields ...field.RelationField) *emailSysUserDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emailSysUserDo) FirstOrInit() (*model.EmlSysUser, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlSysUser), nil
	}
}

func (e emailSysUserDo) FirstOrCreate() (*model.EmlSysUser, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlSysUser), nil
	}
}

func (e emailSysUserDo) FindByPage(offset int, limit int) (result []*model.EmlSysUser, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emailSysUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emailSysUserDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emailSysUserDo) Delete(models ...*model.EmlSysUser) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emailSysUserDo) withDO(do gen.Dao) *emailSysUserDo {
	e.DO = *do.(*gen.DO)
	return e
}
