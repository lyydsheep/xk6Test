// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"email/dal/model"
)

func newEmlDomainCredibility(db *gorm.DB, opts ...gen.DOOption) emlDomainCredibility {
	_emlDomainCredibility := emlDomainCredibility{}

	_emlDomainCredibility.emlDomainCredibilityDo.UseDB(db, opts...)
	_emlDomainCredibility.emlDomainCredibilityDo.UseModel(&model.EmlDomainCredibility{})

	tableName := _emlDomainCredibility.emlDomainCredibilityDo.TableName()
	_emlDomainCredibility.ALL = field.NewAsterisk(tableName)
	_emlDomainCredibility.ID = field.NewInt64(tableName, "id")
	_emlDomainCredibility.Cid = field.NewInt64(tableName, "cid")
	_emlDomainCredibility.FromAddress = field.NewString(tableName, "from_address")
	_emlDomainCredibility.Domain = field.NewString(tableName, "domain")
	_emlDomainCredibility.LastSentTime = field.NewTime(tableName, "last_sent_time")
	_emlDomainCredibility.SuccessRateDay = field.NewFloat64(tableName, "success_rate_day")
	_emlDomainCredibility.SuccessRateHour = field.NewFloat64(tableName, "success_rate_hour")
	_emlDomainCredibility.Speed = field.NewString(tableName, "speed")
	_emlDomainCredibility.CreateTime = field.NewTime(tableName, "create_time")
	_emlDomainCredibility.UpdateTime = field.NewTime(tableName, "update_time")

	_emlDomainCredibility.fillFieldMap()

	return _emlDomainCredibility
}

type emlDomainCredibility struct {
	emlDomainCredibilityDo emlDomainCredibilityDo

	ALL             field.Asterisk
	ID              field.Int64
	Cid             field.Int64
	FromAddress     field.String  // 发件地址
	Domain          field.String  // 收件域名，以@开头
	LastSentTime    field.Time    // 上一次向收件域发送邮件的时间
	SuccessRateDay  field.Float64 // 每日成功率
	SuccessRateHour field.Float64 // 每小时成功率
	Speed           field.String  // 发件速度 xx秒 xx 封 ---> 8秒 1 封：8,1    1秒 3 封：1,3
	CreateTime      field.Time
	UpdateTime      field.Time

	fieldMap map[string]field.Expr
}

func (e emlDomainCredibility) Table(newTableName string) *emlDomainCredibility {
	e.emlDomainCredibilityDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emlDomainCredibility) As(alias string) *emlDomainCredibility {
	e.emlDomainCredibilityDo.DO = *(e.emlDomainCredibilityDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emlDomainCredibility) updateTableName(table string) *emlDomainCredibility {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Cid = field.NewInt64(table, "cid")
	e.FromAddress = field.NewString(table, "from_address")
	e.Domain = field.NewString(table, "domain")
	e.LastSentTime = field.NewTime(table, "last_sent_time")
	e.SuccessRateDay = field.NewFloat64(table, "success_rate_day")
	e.SuccessRateHour = field.NewFloat64(table, "success_rate_hour")
	e.Speed = field.NewString(table, "speed")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *emlDomainCredibility) WithContext(ctx context.Context) *emlDomainCredibilityDo {
	return e.emlDomainCredibilityDo.WithContext(ctx)
}

func (e emlDomainCredibility) TableName() string { return e.emlDomainCredibilityDo.TableName() }

func (e emlDomainCredibility) Alias() string { return e.emlDomainCredibilityDo.Alias() }

func (e emlDomainCredibility) Columns(cols ...field.Expr) gen.Columns {
	return e.emlDomainCredibilityDo.Columns(cols...)
}

func (e *emlDomainCredibility) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emlDomainCredibility) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 10)
	e.fieldMap["id"] = e.ID
	e.fieldMap["cid"] = e.Cid
	e.fieldMap["from_address"] = e.FromAddress
	e.fieldMap["domain"] = e.Domain
	e.fieldMap["last_sent_time"] = e.LastSentTime
	e.fieldMap["success_rate_day"] = e.SuccessRateDay
	e.fieldMap["success_rate_hour"] = e.SuccessRateHour
	e.fieldMap["speed"] = e.Speed
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e emlDomainCredibility) clone(db *gorm.DB) emlDomainCredibility {
	e.emlDomainCredibilityDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e emlDomainCredibility) replaceDB(db *gorm.DB) emlDomainCredibility {
	e.emlDomainCredibilityDo.ReplaceDB(db)
	return e
}

type emlDomainCredibilityDo struct{ gen.DO }

func (e emlDomainCredibilityDo) Debug() *emlDomainCredibilityDo {
	return e.withDO(e.DO.Debug())
}

func (e emlDomainCredibilityDo) WithContext(ctx context.Context) *emlDomainCredibilityDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emlDomainCredibilityDo) ReadDB() *emlDomainCredibilityDo {
	return e.Clauses(dbresolver.Read)
}

func (e emlDomainCredibilityDo) WriteDB() *emlDomainCredibilityDo {
	return e.Clauses(dbresolver.Write)
}

func (e emlDomainCredibilityDo) Session(config *gorm.Session) *emlDomainCredibilityDo {
	return e.withDO(e.DO.Session(config))
}

func (e emlDomainCredibilityDo) Clauses(conds ...clause.Expression) *emlDomainCredibilityDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emlDomainCredibilityDo) Returning(value interface{}, columns ...string) *emlDomainCredibilityDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emlDomainCredibilityDo) Not(conds ...gen.Condition) *emlDomainCredibilityDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emlDomainCredibilityDo) Or(conds ...gen.Condition) *emlDomainCredibilityDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emlDomainCredibilityDo) Select(conds ...field.Expr) *emlDomainCredibilityDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emlDomainCredibilityDo) Where(conds ...gen.Condition) *emlDomainCredibilityDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emlDomainCredibilityDo) Order(conds ...field.Expr) *emlDomainCredibilityDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emlDomainCredibilityDo) Distinct(cols ...field.Expr) *emlDomainCredibilityDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emlDomainCredibilityDo) Omit(cols ...field.Expr) *emlDomainCredibilityDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emlDomainCredibilityDo) Join(table schema.Tabler, on ...field.Expr) *emlDomainCredibilityDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emlDomainCredibilityDo) LeftJoin(table schema.Tabler, on ...field.Expr) *emlDomainCredibilityDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emlDomainCredibilityDo) RightJoin(table schema.Tabler, on ...field.Expr) *emlDomainCredibilityDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emlDomainCredibilityDo) Group(cols ...field.Expr) *emlDomainCredibilityDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emlDomainCredibilityDo) Having(conds ...gen.Condition) *emlDomainCredibilityDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emlDomainCredibilityDo) Limit(limit int) *emlDomainCredibilityDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emlDomainCredibilityDo) Offset(offset int) *emlDomainCredibilityDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emlDomainCredibilityDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *emlDomainCredibilityDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emlDomainCredibilityDo) Unscoped() *emlDomainCredibilityDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emlDomainCredibilityDo) Create(values ...*model.EmlDomainCredibility) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emlDomainCredibilityDo) CreateInBatches(values []*model.EmlDomainCredibility, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emlDomainCredibilityDo) Save(values ...*model.EmlDomainCredibility) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emlDomainCredibilityDo) First() (*model.EmlDomainCredibility, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlDomainCredibility), nil
	}
}

func (e emlDomainCredibilityDo) Take() (*model.EmlDomainCredibility, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlDomainCredibility), nil
	}
}

func (e emlDomainCredibilityDo) Last() (*model.EmlDomainCredibility, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlDomainCredibility), nil
	}
}

func (e emlDomainCredibilityDo) Find() ([]*model.EmlDomainCredibility, error) {
	result, err := e.DO.Find()
	return result.([]*model.EmlDomainCredibility), err
}

func (e emlDomainCredibilityDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmlDomainCredibility, err error) {
	buf := make([]*model.EmlDomainCredibility, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emlDomainCredibilityDo) FindInBatches(result *[]*model.EmlDomainCredibility, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emlDomainCredibilityDo) Attrs(attrs ...field.AssignExpr) *emlDomainCredibilityDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emlDomainCredibilityDo) Assign(attrs ...field.AssignExpr) *emlDomainCredibilityDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emlDomainCredibilityDo) Joins(fields ...field.RelationField) *emlDomainCredibilityDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emlDomainCredibilityDo) Preload(fields ...field.RelationField) *emlDomainCredibilityDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emlDomainCredibilityDo) FirstOrInit() (*model.EmlDomainCredibility, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlDomainCredibility), nil
	}
}

func (e emlDomainCredibilityDo) FirstOrCreate() (*model.EmlDomainCredibility, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlDomainCredibility), nil
	}
}

func (e emlDomainCredibilityDo) FindByPage(offset int, limit int) (result []*model.EmlDomainCredibility, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emlDomainCredibilityDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emlDomainCredibilityDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emlDomainCredibilityDo) Delete(models ...*model.EmlDomainCredibility) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emlDomainCredibilityDo) withDO(do gen.Dao) *emlDomainCredibilityDo {
	e.DO = *do.(*gen.DO)
	return e
}
