// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                    db,
		EmlDomainCredibility:  newEmlDomainCredibility(db, opts...),
		EmlRedemptionCode:     newEmlRedemptionCode(db, opts...),
		EmlRedemptionTaskSub:  newEmlRedemptionTaskSub(db, opts...),
		EmlSysUser:            newEmlSysUser(db, opts...),
		EmlTag:                newEmlTag(db, opts...),
		EmlTask:               newEmlTask(db, opts...),
		EmlTaskConfig:         newEmlTaskConfig(db, opts...),
		EmlTaskSub:            newEmlTaskSub(db, opts...),
		EmlTemplate:           newEmlTemplate(db, opts...),
		EmlUnsubscribeUsrUser: newEmlUnsubscribeUsrUser(db, opts...),
		OpsEmlNumberSuccess:   newOpsEmlNumberSuccess(db, opts...),
		OpsEmlResult:          newOpsEmlResult(db, opts...),
		UsrUser:               newUsrUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	EmlDomainCredibility  emlDomainCredibility
	EmlRedemptionCode     emlRedemptionCode
	EmlRedemptionTaskSub  emlRedemptionTaskSub
	EmlSysUser            emlSysUser
	EmlTag                emlTag
	EmlTask               emlTask
	EmlTaskConfig         emlTaskConfig
	EmlTaskSub            emlTaskSub
	EmlTemplate           emlTemplate
	EmlUnsubscribeUsrUser emlUnsubscribeUsrUser
	OpsEmlNumberSuccess   opsEmlNumberSuccess
	OpsEmlResult          opsEmlResult
	UsrUser               usrUser
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		EmlDomainCredibility:  q.EmlDomainCredibility.clone(db),
		EmlRedemptionCode:     q.EmlRedemptionCode.clone(db),
		EmlRedemptionTaskSub:  q.EmlRedemptionTaskSub.clone(db),
		EmlSysUser:            q.EmlSysUser.clone(db),
		EmlTag:                q.EmlTag.clone(db),
		EmlTask:               q.EmlTask.clone(db),
		EmlTaskConfig:         q.EmlTaskConfig.clone(db),
		EmlTaskSub:            q.EmlTaskSub.clone(db),
		EmlTemplate:           q.EmlTemplate.clone(db),
		EmlUnsubscribeUsrUser: q.EmlUnsubscribeUsrUser.clone(db),
		OpsEmlNumberSuccess:   q.OpsEmlNumberSuccess.clone(db),
		OpsEmlResult:          q.OpsEmlResult.clone(db),
		UsrUser:               q.UsrUser.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		EmlDomainCredibility:  q.EmlDomainCredibility.replaceDB(db),
		EmlRedemptionCode:     q.EmlRedemptionCode.replaceDB(db),
		EmlRedemptionTaskSub:  q.EmlRedemptionTaskSub.replaceDB(db),
		EmlSysUser:            q.EmlSysUser.replaceDB(db),
		EmlTag:                q.EmlTag.replaceDB(db),
		EmlTask:               q.EmlTask.replaceDB(db),
		EmlTaskConfig:         q.EmlTaskConfig.replaceDB(db),
		EmlTaskSub:            q.EmlTaskSub.replaceDB(db),
		EmlTemplate:           q.EmlTemplate.replaceDB(db),
		EmlUnsubscribeUsrUser: q.EmlUnsubscribeUsrUser.replaceDB(db),
		OpsEmlNumberSuccess:   q.OpsEmlNumberSuccess.replaceDB(db),
		OpsEmlResult:          q.OpsEmlResult.replaceDB(db),
		UsrUser:               q.UsrUser.replaceDB(db),
	}
}

type queryCtx struct {
	EmlDomainCredibility  *emlDomainCredibilityDo
	EmlRedemptionCode     *emlRedemptionCodeDo
	EmlRedemptionTaskSub  *emlRedemptionTaskSubDo
	EmlSysUser            *emlSysUserDo
	EmlTag                *emlTagDo
	EmlTask               *emlTaskDo
	EmlTaskConfig         *emlTaskConfigDo
	EmlTaskSub            *emlTaskSubDo
	EmlTemplate           *emlTemplateDo
	EmlUnsubscribeUsrUser *emlUnsubscribeUsrUserDo
	OpsEmlNumberSuccess   *opsEmlNumberSuccessDo
	OpsEmlResult          *opsEmlResultDo
	UsrUser               *usrUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		EmlDomainCredibility:  q.EmlDomainCredibility.WithContext(ctx),
		EmlRedemptionCode:     q.EmlRedemptionCode.WithContext(ctx),
		EmlRedemptionTaskSub:  q.EmlRedemptionTaskSub.WithContext(ctx),
		EmlSysUser:            q.EmlSysUser.WithContext(ctx),
		EmlTag:                q.EmlTag.WithContext(ctx),
		EmlTask:               q.EmlTask.WithContext(ctx),
		EmlTaskConfig:         q.EmlTaskConfig.WithContext(ctx),
		EmlTaskSub:            q.EmlTaskSub.WithContext(ctx),
		EmlTemplate:           q.EmlTemplate.WithContext(ctx),
		EmlUnsubscribeUsrUser: q.EmlUnsubscribeUsrUser.WithContext(ctx),
		OpsEmlNumberSuccess:   q.OpsEmlNumberSuccess.WithContext(ctx),
		OpsEmlResult:          q.OpsEmlResult.WithContext(ctx),
		UsrUser:               q.UsrUser.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
