// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"email/dal/model"
)

func newEmailTemplate(db *gorm.DB, opts ...gen.DOOption) emailTemplate {
	_emailTemplate := emailTemplate{}

	_emailTemplate.emailTemplateDo.UseDB(db, opts...)
	_emailTemplate.emailTemplateDo.UseModel(&model.EmlTemplate{})

	tableName := _emailTemplate.emailTemplateDo.TableName()
	_emailTemplate.ALL = field.NewAsterisk(tableName)
	_emailTemplate.ID = field.NewInt64(tableName, "id")
	_emailTemplate.Cid = field.NewInt64(tableName, "cid")
	_emailTemplate.Category = field.NewString(tableName, "category")
	_emailTemplate.ContentType = field.NewString(tableName, "content_type")
	_emailTemplate.TemplateName = field.NewString(tableName, "template_name")
	_emailTemplate.SubjectZh = field.NewString(tableName, "subject_zh")
	_emailTemplate.SubjectEn = field.NewString(tableName, "subject_en")
	_emailTemplate.FromName = field.NewString(tableName, "from_name")
	_emailTemplate.ContentZh = field.NewString(tableName, "content_zh")
	_emailTemplate.ContentEn = field.NewString(tableName, "content_en")
	_emailTemplate.Description = field.NewString(tableName, "description")
	_emailTemplate.UpdateTime = field.NewTime(tableName, "update_time")
	_emailTemplate.CreateTime = field.NewTime(tableName, "create_time")

	_emailTemplate.fillFieldMap()

	return _emailTemplate
}

type emailTemplate struct {
	emailTemplateDo emailTemplateDo

	ALL          field.Asterisk
	ID           field.Int64
	Cid          field.Int64  // 关联商户 ID
	Category     field.String // 模板类型，目前有：普通（common）、推荐奖励（redemption）
	ContentType  field.String // 模板类型(text/HTML 或 text/plain)
	TemplateName field.String // 模板名称
	SubjectZh    field.String // 邮件中文标题
	SubjectEn    field.String // 邮件英文标题
	FromName     field.String // 发送人名称
	ContentZh    field.String // 中文模板
	ContentEn    field.String // 英文模板
	Description  field.String // 模板描述（非必需）
	UpdateTime   field.Time   // 更新时间
	CreateTime   field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (e emailTemplate) Table(newTableName string) *emailTemplate {
	e.emailTemplateDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emailTemplate) As(alias string) *emailTemplate {
	e.emailTemplateDo.DO = *(e.emailTemplateDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emailTemplate) updateTableName(table string) *emailTemplate {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Cid = field.NewInt64(table, "cid")
	e.Category = field.NewString(table, "category")
	e.ContentType = field.NewString(table, "content_type")
	e.TemplateName = field.NewString(table, "template_name")
	e.SubjectZh = field.NewString(table, "subject_zh")
	e.SubjectEn = field.NewString(table, "subject_en")
	e.FromName = field.NewString(table, "from_name")
	e.ContentZh = field.NewString(table, "content_zh")
	e.ContentEn = field.NewString(table, "content_en")
	e.Description = field.NewString(table, "description")
	e.UpdateTime = field.NewTime(table, "update_time")
	e.CreateTime = field.NewTime(table, "create_time")

	e.fillFieldMap()

	return e
}

func (e *emailTemplate) WithContext(ctx context.Context) *emailTemplateDo {
	return e.emailTemplateDo.WithContext(ctx)
}

func (e emailTemplate) TableName() string { return e.emailTemplateDo.TableName() }

func (e emailTemplate) Alias() string { return e.emailTemplateDo.Alias() }

func (e emailTemplate) Columns(cols ...field.Expr) gen.Columns {
	return e.emailTemplateDo.Columns(cols...)
}

func (e *emailTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emailTemplate) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 13)
	e.fieldMap["id"] = e.ID
	e.fieldMap["cid"] = e.Cid
	e.fieldMap["category"] = e.Category
	e.fieldMap["content_type"] = e.ContentType
	e.fieldMap["template_name"] = e.TemplateName
	e.fieldMap["subject_zh"] = e.SubjectZh
	e.fieldMap["subject_en"] = e.SubjectEn
	e.fieldMap["from_name"] = e.FromName
	e.fieldMap["content_zh"] = e.ContentZh
	e.fieldMap["content_en"] = e.ContentEn
	e.fieldMap["description"] = e.Description
	e.fieldMap["update_time"] = e.UpdateTime
	e.fieldMap["create_time"] = e.CreateTime
}

func (e emailTemplate) clone(db *gorm.DB) emailTemplate {
	e.emailTemplateDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e emailTemplate) replaceDB(db *gorm.DB) emailTemplate {
	e.emailTemplateDo.ReplaceDB(db)
	return e
}

type emailTemplateDo struct{ gen.DO }

func (e emailTemplateDo) Debug() *emailTemplateDo {
	return e.withDO(e.DO.Debug())
}

func (e emailTemplateDo) WithContext(ctx context.Context) *emailTemplateDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emailTemplateDo) ReadDB() *emailTemplateDo {
	return e.Clauses(dbresolver.Read)
}

func (e emailTemplateDo) WriteDB() *emailTemplateDo {
	return e.Clauses(dbresolver.Write)
}

func (e emailTemplateDo) Session(config *gorm.Session) *emailTemplateDo {
	return e.withDO(e.DO.Session(config))
}

func (e emailTemplateDo) Clauses(conds ...clause.Expression) *emailTemplateDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emailTemplateDo) Returning(value interface{}, columns ...string) *emailTemplateDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emailTemplateDo) Not(conds ...gen.Condition) *emailTemplateDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emailTemplateDo) Or(conds ...gen.Condition) *emailTemplateDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emailTemplateDo) Select(conds ...field.Expr) *emailTemplateDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emailTemplateDo) Where(conds ...gen.Condition) *emailTemplateDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emailTemplateDo) Order(conds ...field.Expr) *emailTemplateDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emailTemplateDo) Distinct(cols ...field.Expr) *emailTemplateDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emailTemplateDo) Omit(cols ...field.Expr) *emailTemplateDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emailTemplateDo) Join(table schema.Tabler, on ...field.Expr) *emailTemplateDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emailTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *emailTemplateDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emailTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) *emailTemplateDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emailTemplateDo) Group(cols ...field.Expr) *emailTemplateDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emailTemplateDo) Having(conds ...gen.Condition) *emailTemplateDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emailTemplateDo) Limit(limit int) *emailTemplateDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emailTemplateDo) Offset(offset int) *emailTemplateDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emailTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *emailTemplateDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emailTemplateDo) Unscoped() *emailTemplateDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emailTemplateDo) Create(values ...*model.EmlTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emailTemplateDo) CreateInBatches(values []*model.EmlTemplate, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emailTemplateDo) Save(values ...*model.EmlTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emailTemplateDo) First() (*model.EmlTemplate, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTemplate), nil
	}
}

func (e emailTemplateDo) Take() (*model.EmlTemplate, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTemplate), nil
	}
}

func (e emailTemplateDo) Last() (*model.EmlTemplate, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTemplate), nil
	}
}

func (e emailTemplateDo) Find() ([]*model.EmlTemplate, error) {
	result, err := e.DO.Find()
	return result.([]*model.EmlTemplate), err
}

func (e emailTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmlTemplate, err error) {
	buf := make([]*model.EmlTemplate, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emailTemplateDo) FindInBatches(result *[]*model.EmlTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emailTemplateDo) Attrs(attrs ...field.AssignExpr) *emailTemplateDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emailTemplateDo) Assign(attrs ...field.AssignExpr) *emailTemplateDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emailTemplateDo) Joins(fields ...field.RelationField) *emailTemplateDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emailTemplateDo) Preload(fields ...field.RelationField) *emailTemplateDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emailTemplateDo) FirstOrInit() (*model.EmlTemplate, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTemplate), nil
	}
}

func (e emailTemplateDo) FirstOrCreate() (*model.EmlTemplate, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTemplate), nil
	}
}

func (e emailTemplateDo) FindByPage(offset int, limit int) (result []*model.EmlTemplate, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emailTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emailTemplateDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emailTemplateDo) Delete(models ...*model.EmlTemplate) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emailTemplateDo) withDO(do gen.Dao) *emailTemplateDo {
	e.DO = *do.(*gen.DO)
	return e
}
