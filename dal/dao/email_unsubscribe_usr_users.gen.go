// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"email/dal/model"
)

func newEmailUnsubscribeUsrUser(db *gorm.DB, opts ...gen.DOOption) emailUnsubscribeUsrUser {
	_emailUnsubscribeUsrUser := emailUnsubscribeUsrUser{}

	_emailUnsubscribeUsrUser.emailUnsubscribeUsrUserDo.UseDB(db, opts...)
	_emailUnsubscribeUsrUser.emailUnsubscribeUsrUserDo.UseModel(&model.EmlUnsubscribeUsrUser{})

	tableName := _emailUnsubscribeUsrUser.emailUnsubscribeUsrUserDo.TableName()
	_emailUnsubscribeUsrUser.ALL = field.NewAsterisk(tableName)
	_emailUnsubscribeUsrUser.ID = field.NewInt64(tableName, "id")
	_emailUnsubscribeUsrUser.Cid = field.NewInt64(tableName, "cid")
	_emailUnsubscribeUsrUser.UID = field.NewString(tableName, "uid")
	_emailUnsubscribeUsrUser.Spm = field.NewString(tableName, "spm")
	_emailUnsubscribeUsrUser.IP = field.NewString(tableName, "ip")

	_emailUnsubscribeUsrUser.fillFieldMap()

	return _emailUnsubscribeUsrUser
}

type emailUnsubscribeUsrUser struct {
	emailUnsubscribeUsrUserDo emailUnsubscribeUsrUserDo

	ALL field.Asterisk
	ID  field.Int64
	Cid field.Int64  // 商户ID
	UID field.String // 用户ID
	Spm field.String
	IP  field.String

	fieldMap map[string]field.Expr
}

func (e emailUnsubscribeUsrUser) Table(newTableName string) *emailUnsubscribeUsrUser {
	e.emailUnsubscribeUsrUserDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emailUnsubscribeUsrUser) As(alias string) *emailUnsubscribeUsrUser {
	e.emailUnsubscribeUsrUserDo.DO = *(e.emailUnsubscribeUsrUserDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emailUnsubscribeUsrUser) updateTableName(table string) *emailUnsubscribeUsrUser {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Cid = field.NewInt64(table, "cid")
	e.UID = field.NewString(table, "uid")
	e.Spm = field.NewString(table, "spm")
	e.IP = field.NewString(table, "ip")

	e.fillFieldMap()

	return e
}

func (e *emailUnsubscribeUsrUser) WithContext(ctx context.Context) *emailUnsubscribeUsrUserDo {
	return e.emailUnsubscribeUsrUserDo.WithContext(ctx)
}

func (e emailUnsubscribeUsrUser) TableName() string { return e.emailUnsubscribeUsrUserDo.TableName() }

func (e emailUnsubscribeUsrUser) Alias() string { return e.emailUnsubscribeUsrUserDo.Alias() }

func (e emailUnsubscribeUsrUser) Columns(cols ...field.Expr) gen.Columns {
	return e.emailUnsubscribeUsrUserDo.Columns(cols...)
}

func (e *emailUnsubscribeUsrUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emailUnsubscribeUsrUser) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 5)
	e.fieldMap["id"] = e.ID
	e.fieldMap["cid"] = e.Cid
	e.fieldMap["uid"] = e.UID
	e.fieldMap["spm"] = e.Spm
	e.fieldMap["ip"] = e.IP
}

func (e emailUnsubscribeUsrUser) clone(db *gorm.DB) emailUnsubscribeUsrUser {
	e.emailUnsubscribeUsrUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e emailUnsubscribeUsrUser) replaceDB(db *gorm.DB) emailUnsubscribeUsrUser {
	e.emailUnsubscribeUsrUserDo.ReplaceDB(db)
	return e
}

type emailUnsubscribeUsrUserDo struct{ gen.DO }

func (e emailUnsubscribeUsrUserDo) Debug() *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Debug())
}

func (e emailUnsubscribeUsrUserDo) WithContext(ctx context.Context) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emailUnsubscribeUsrUserDo) ReadDB() *emailUnsubscribeUsrUserDo {
	return e.Clauses(dbresolver.Read)
}

func (e emailUnsubscribeUsrUserDo) WriteDB() *emailUnsubscribeUsrUserDo {
	return e.Clauses(dbresolver.Write)
}

func (e emailUnsubscribeUsrUserDo) Session(config *gorm.Session) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Session(config))
}

func (e emailUnsubscribeUsrUserDo) Clauses(conds ...clause.Expression) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emailUnsubscribeUsrUserDo) Returning(value interface{}, columns ...string) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emailUnsubscribeUsrUserDo) Not(conds ...gen.Condition) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emailUnsubscribeUsrUserDo) Or(conds ...gen.Condition) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emailUnsubscribeUsrUserDo) Select(conds ...field.Expr) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emailUnsubscribeUsrUserDo) Where(conds ...gen.Condition) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emailUnsubscribeUsrUserDo) Order(conds ...field.Expr) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emailUnsubscribeUsrUserDo) Distinct(cols ...field.Expr) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emailUnsubscribeUsrUserDo) Omit(cols ...field.Expr) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emailUnsubscribeUsrUserDo) Join(table schema.Tabler, on ...field.Expr) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emailUnsubscribeUsrUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emailUnsubscribeUsrUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emailUnsubscribeUsrUserDo) Group(cols ...field.Expr) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emailUnsubscribeUsrUserDo) Having(conds ...gen.Condition) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emailUnsubscribeUsrUserDo) Limit(limit int) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emailUnsubscribeUsrUserDo) Offset(offset int) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emailUnsubscribeUsrUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emailUnsubscribeUsrUserDo) Unscoped() *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emailUnsubscribeUsrUserDo) Create(values ...*model.EmlUnsubscribeUsrUser) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emailUnsubscribeUsrUserDo) CreateInBatches(values []*model.EmlUnsubscribeUsrUser, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emailUnsubscribeUsrUserDo) Save(values ...*model.EmlUnsubscribeUsrUser) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emailUnsubscribeUsrUserDo) First() (*model.EmlUnsubscribeUsrUser, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlUnsubscribeUsrUser), nil
	}
}

func (e emailUnsubscribeUsrUserDo) Take() (*model.EmlUnsubscribeUsrUser, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlUnsubscribeUsrUser), nil
	}
}

func (e emailUnsubscribeUsrUserDo) Last() (*model.EmlUnsubscribeUsrUser, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlUnsubscribeUsrUser), nil
	}
}

func (e emailUnsubscribeUsrUserDo) Find() ([]*model.EmlUnsubscribeUsrUser, error) {
	result, err := e.DO.Find()
	return result.([]*model.EmlUnsubscribeUsrUser), err
}

func (e emailUnsubscribeUsrUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmlUnsubscribeUsrUser, err error) {
	buf := make([]*model.EmlUnsubscribeUsrUser, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emailUnsubscribeUsrUserDo) FindInBatches(result *[]*model.EmlUnsubscribeUsrUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emailUnsubscribeUsrUserDo) Attrs(attrs ...field.AssignExpr) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emailUnsubscribeUsrUserDo) Assign(attrs ...field.AssignExpr) *emailUnsubscribeUsrUserDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emailUnsubscribeUsrUserDo) Joins(fields ...field.RelationField) *emailUnsubscribeUsrUserDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emailUnsubscribeUsrUserDo) Preload(fields ...field.RelationField) *emailUnsubscribeUsrUserDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emailUnsubscribeUsrUserDo) FirstOrInit() (*model.EmlUnsubscribeUsrUser, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlUnsubscribeUsrUser), nil
	}
}

func (e emailUnsubscribeUsrUserDo) FirstOrCreate() (*model.EmlUnsubscribeUsrUser, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlUnsubscribeUsrUser), nil
	}
}

func (e emailUnsubscribeUsrUserDo) FindByPage(offset int, limit int) (result []*model.EmlUnsubscribeUsrUser, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emailUnsubscribeUsrUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emailUnsubscribeUsrUserDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emailUnsubscribeUsrUserDo) Delete(models ...*model.EmlUnsubscribeUsrUser) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emailUnsubscribeUsrUserDo) withDO(do gen.Dao) *emailUnsubscribeUsrUserDo {
	e.DO = *do.(*gen.DO)
	return e
}
