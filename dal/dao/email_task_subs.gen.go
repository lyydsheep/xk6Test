// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"email/dal/model"
)

func newEmailTaskSub(db *gorm.DB, opts ...gen.DOOption) emailTaskSub {
	_emailTaskSub := emailTaskSub{}

	_emailTaskSub.emailTaskSubDo.UseDB(db, opts...)
	_emailTaskSub.emailTaskSubDo.UseModel(&model.EmlTaskSub{})

	tableName := _emailTaskSub.emailTaskSubDo.TableName()
	_emailTaskSub.ALL = field.NewAsterisk(tableName)
	_emailTaskSub.ID = field.NewInt64(tableName, "id")
	_emailTaskSub.Cid = field.NewInt64(tableName, "cid")
	_emailTaskSub.TaskID = field.NewInt64(tableName, "task_id")
	_emailTaskSub.FromEmail = field.NewString(tableName, "from_email")
	_emailTaskSub.ToUserID = field.NewString(tableName, "to_user_id")
	_emailTaskSub.ToEmail = field.NewString(tableName, "to_email")
	_emailTaskSub.TemplateID = field.NewInt64(tableName, "template_id")
	_emailTaskSub.Status = field.NewString(tableName, "status")
	_emailTaskSub.Version = field.NewInt32(tableName, "version")
	_emailTaskSub.FetchTime = field.NewTime(tableName, "fetch_time")
	_emailTaskSub.StatusDescription = field.NewString(tableName, "status_description")
	_emailTaskSub.ConcreteState = field.NewString(tableName, "concrete_state")
	_emailTaskSub.UpdateTime = field.NewTime(tableName, "update_time")
	_emailTaskSub.CreateTime = field.NewTime(tableName, "create_time")

	_emailTaskSub.fillFieldMap()

	return _emailTaskSub
}

type emailTaskSub struct {
	emailTaskSubDo emailTaskSubDo

	ALL               field.Asterisk
	ID                field.Int64
	Cid               field.Int64 // 关联商户 ID
	TaskID            field.Int64
	FromEmail         field.String // 发件人地址
	ToUserID          field.String // 收件人用户 ID
	ToEmail           field.String // 收件人邮箱
	TemplateID        field.Int64
	Status            field.String // 任务状态(unsent、processing、send failure、sent、opened、clicked)
	Version           field.Int32  // 乐观锁
	FetchTime         field.Time   // 上次获取事件
	StatusDescription field.String // 状态描述
	ConcreteState     field.String // 邮件详细的状态
	UpdateTime        field.Time   // 更新时间
	CreateTime        field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (e emailTaskSub) Table(newTableName string) *emailTaskSub {
	e.emailTaskSubDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emailTaskSub) As(alias string) *emailTaskSub {
	e.emailTaskSubDo.DO = *(e.emailTaskSubDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emailTaskSub) updateTableName(table string) *emailTaskSub {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Cid = field.NewInt64(table, "cid")
	e.TaskID = field.NewInt64(table, "task_id")
	e.FromEmail = field.NewString(table, "from_email")
	e.ToUserID = field.NewString(table, "to_user_id")
	e.ToEmail = field.NewString(table, "to_email")
	e.TemplateID = field.NewInt64(table, "template_id")
	e.Status = field.NewString(table, "status")
	e.Version = field.NewInt32(table, "version")
	e.FetchTime = field.NewTime(table, "fetch_time")
	e.StatusDescription = field.NewString(table, "status_description")
	e.ConcreteState = field.NewString(table, "concrete_state")
	e.UpdateTime = field.NewTime(table, "update_time")
	e.CreateTime = field.NewTime(table, "create_time")

	e.fillFieldMap()

	return e
}

func (e *emailTaskSub) WithContext(ctx context.Context) *emailTaskSubDo {
	return e.emailTaskSubDo.WithContext(ctx)
}

func (e emailTaskSub) TableName() string { return e.emailTaskSubDo.TableName() }

func (e emailTaskSub) Alias() string { return e.emailTaskSubDo.Alias() }

func (e emailTaskSub) Columns(cols ...field.Expr) gen.Columns {
	return e.emailTaskSubDo.Columns(cols...)
}

func (e *emailTaskSub) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emailTaskSub) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 14)
	e.fieldMap["id"] = e.ID
	e.fieldMap["cid"] = e.Cid
	e.fieldMap["task_id"] = e.TaskID
	e.fieldMap["from_email"] = e.FromEmail
	e.fieldMap["to_user_id"] = e.ToUserID
	e.fieldMap["to_email"] = e.ToEmail
	e.fieldMap["template_id"] = e.TemplateID
	e.fieldMap["status"] = e.Status
	e.fieldMap["version"] = e.Version
	e.fieldMap["fetch_time"] = e.FetchTime
	e.fieldMap["status_description"] = e.StatusDescription
	e.fieldMap["concrete_state"] = e.ConcreteState
	e.fieldMap["update_time"] = e.UpdateTime
	e.fieldMap["create_time"] = e.CreateTime
}

func (e emailTaskSub) clone(db *gorm.DB) emailTaskSub {
	e.emailTaskSubDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e emailTaskSub) replaceDB(db *gorm.DB) emailTaskSub {
	e.emailTaskSubDo.ReplaceDB(db)
	return e
}

type emailTaskSubDo struct{ gen.DO }

func (e emailTaskSubDo) Debug() *emailTaskSubDo {
	return e.withDO(e.DO.Debug())
}

func (e emailTaskSubDo) WithContext(ctx context.Context) *emailTaskSubDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emailTaskSubDo) ReadDB() *emailTaskSubDo {
	return e.Clauses(dbresolver.Read)
}

func (e emailTaskSubDo) WriteDB() *emailTaskSubDo {
	return e.Clauses(dbresolver.Write)
}

func (e emailTaskSubDo) Session(config *gorm.Session) *emailTaskSubDo {
	return e.withDO(e.DO.Session(config))
}

func (e emailTaskSubDo) Clauses(conds ...clause.Expression) *emailTaskSubDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emailTaskSubDo) Returning(value interface{}, columns ...string) *emailTaskSubDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emailTaskSubDo) Not(conds ...gen.Condition) *emailTaskSubDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emailTaskSubDo) Or(conds ...gen.Condition) *emailTaskSubDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emailTaskSubDo) Select(conds ...field.Expr) *emailTaskSubDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emailTaskSubDo) Where(conds ...gen.Condition) *emailTaskSubDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emailTaskSubDo) Order(conds ...field.Expr) *emailTaskSubDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emailTaskSubDo) Distinct(cols ...field.Expr) *emailTaskSubDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emailTaskSubDo) Omit(cols ...field.Expr) *emailTaskSubDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emailTaskSubDo) Join(table schema.Tabler, on ...field.Expr) *emailTaskSubDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emailTaskSubDo) LeftJoin(table schema.Tabler, on ...field.Expr) *emailTaskSubDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emailTaskSubDo) RightJoin(table schema.Tabler, on ...field.Expr) *emailTaskSubDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emailTaskSubDo) Group(cols ...field.Expr) *emailTaskSubDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emailTaskSubDo) Having(conds ...gen.Condition) *emailTaskSubDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emailTaskSubDo) Limit(limit int) *emailTaskSubDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emailTaskSubDo) Offset(offset int) *emailTaskSubDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emailTaskSubDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *emailTaskSubDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emailTaskSubDo) Unscoped() *emailTaskSubDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emailTaskSubDo) Create(values ...*model.EmlTaskSub) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emailTaskSubDo) CreateInBatches(values []*model.EmlTaskSub, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emailTaskSubDo) Save(values ...*model.EmlTaskSub) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emailTaskSubDo) First() (*model.EmlTaskSub, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTaskSub), nil
	}
}

func (e emailTaskSubDo) Take() (*model.EmlTaskSub, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTaskSub), nil
	}
}

func (e emailTaskSubDo) Last() (*model.EmlTaskSub, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTaskSub), nil
	}
}

func (e emailTaskSubDo) Find() ([]*model.EmlTaskSub, error) {
	result, err := e.DO.Find()
	return result.([]*model.EmlTaskSub), err
}

func (e emailTaskSubDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmlTaskSub, err error) {
	buf := make([]*model.EmlTaskSub, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emailTaskSubDo) FindInBatches(result *[]*model.EmlTaskSub, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emailTaskSubDo) Attrs(attrs ...field.AssignExpr) *emailTaskSubDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emailTaskSubDo) Assign(attrs ...field.AssignExpr) *emailTaskSubDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emailTaskSubDo) Joins(fields ...field.RelationField) *emailTaskSubDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emailTaskSubDo) Preload(fields ...field.RelationField) *emailTaskSubDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emailTaskSubDo) FirstOrInit() (*model.EmlTaskSub, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTaskSub), nil
	}
}

func (e emailTaskSubDo) FirstOrCreate() (*model.EmlTaskSub, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmlTaskSub), nil
	}
}

func (e emailTaskSubDo) FindByPage(offset int, limit int) (result []*model.EmlTaskSub, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emailTaskSubDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emailTaskSubDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emailTaskSubDo) Delete(models ...*model.EmlTaskSub) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emailTaskSubDo) withDO(do gen.Dao) *emailTaskSubDo {
	e.DO = *do.(*gen.DO)
	return e
}
